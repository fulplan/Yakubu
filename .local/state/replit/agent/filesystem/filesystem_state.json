{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Gold Consignment & Storage Platform\n\n## Overview\n\nThis is a comprehensive gold consignment and digital inheritance platform built with React, TypeScript, Express.js, and PostgreSQL. The system provides secure gold storage services, consignment management, digital will creation, inheritance claims processing, and admin management capabilities. The platform features real-time chat support, live gold price tracking, public consignment tracking, and multi-currency payment processing.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript, using Vite for build tooling\n- **UI Components**: shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and color scheme\n- **Routing**: Wouter for client-side routing with protected routes\n- **State Management**: TanStack Query for server state management and API caching\n- **Forms**: React Hook Form with Zod validation schemas\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth integration with OpenID Connect (OIDC)\n- **Session Management**: PostgreSQL-backed sessions with connect-pg-simple\n- **File Handling**: Multer for document uploads with organized storage structure\n- **API Design**: RESTful endpoints with consistent error handling and logging\n\n### Database Design\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **Schema Management**: Drizzle migrations with shared schema definitions\n- **Key Entities**: Users, Consignments, Digital Wills, Beneficiaries, Claims, Chat Messages, Storage Plans\n- **Audit Trail**: Immutable consignment events tracking for compliance\n- **Session Storage**: Dedicated sessions table for authentication state\n\n### Authentication & Authorization\n- **Provider**: Replit Auth with OIDC integration\n- **Session Strategy**: Server-side sessions with HTTP-only cookies\n- **Route Protection**: Middleware-based authentication checks\n- **User Management**: Automatic user creation/updates from auth provider\n- **Security**: CSRF protection, secure cookie settings, and proper session invalidation\n\n### File Management System\n- **Upload Strategy**: Local file storage with organized directory structure\n- **File Types**: Document uploads (PDFs, images), certificates, QR codes, invoices\n- **Security**: File type validation, size limits, and secure file paths\n- **Organization**: Categorized storage (documents, certificates, qr-codes, invoices, reports)\n\n### Service Layer Architecture\n- **Gold Price Service**: External API integration with caching for live market data\n- **PDF Generation**: Certificate creation with QR code integration\n- **QR Code Service**: Dynamic QR generation for tracking and verification\n- **Storage Interface**: Abstract storage layer for database operations\n\n### Real-time Features\n- **Chat System**: WebSocket-based customer support (architecture defined, implementation pending)\n- **Live Updates**: Real-time gold price feeds with automatic refresh\n- **Notifications**: Toast-based user feedback system\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL serverless database\n- **Authentication**: Replit Auth OIDC provider\n- **Build & Deploy**: Vite for frontend builds, esbuild for backend compilation\n\n### UI & Styling\n- **Component Library**: shadcn/ui with Radix UI primitives\n- **Icons**: Lucide React icon library\n- **Fonts**: Google Fonts integration (Inter, Playfair Display)\n- **Styling**: Tailwind CSS with PostCSS processing\n\n### Payment Processing\n- **Gateways**: Stripe for card payments, PayPal for alternative payments\n- **Multi-currency**: Support for USD, GBP, EUR with live exchange rates\n- **Compliance**: PCI-compliant payment handling (architecture defined)\n\n### External APIs\n- **Gold Prices**: Third-party gold price APIs (MetalsAPI, LBMA compatible)\n- **KYC Integration**: Placeholder for Onfido/Trulioo integration\n- **Document Processing**: File upload and verification services\n\n### Development & Monitoring\n- **Development**: Replit development environment with hot reloading\n- **Error Handling**: Comprehensive error boundaries and API error responses\n- **Logging**: Request/response logging with performance metrics\n- **Type Safety**: Full TypeScript coverage across frontend and backend","size_bytes":4463},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        gold: {\n          50: \"var(--gold-50)\",\n          100: \"var(--gold-100)\",\n          200: \"var(--gold-200)\",\n          300: \"var(--gold-300)\",\n          400: \"var(--gold-400)\",\n          500: \"var(--gold-500)\",\n          600: \"var(--gold-600)\",\n          700: \"var(--gold-700)\",\n          800: \"var(--gold-800)\",\n          900: \"var(--gold-900)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        shimmer: {\n          \"0%\": { \"background-position\": \"-200% 0\" },\n          \"100%\": { \"background-position\": \"200% 0\" },\n        },\n        fadeIn: {\n          from: { \n            opacity: \"0\", \n            transform: \"translateY(20px)\" \n          },\n          to: { \n            opacity: \"1\", \n            transform: \"translateY(0)\" \n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        shimmer: \"shimmer 2s infinite\",\n        fadeIn: \"fadeIn 0.6s ease-in\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3577},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\nneonConfig.pipelineConnect = false;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: { rejectUnauthorized: false }\n});\nexport const db = drizzle({ client: pool, schema });","size_bytes":559},"server/index.ts":{"content":"// Disable SSL certificate verification for development\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2171},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, isAdmin } from \"./auth\";\nimport { insertConsignmentSchema, insertDigitalWillSchema, insertBeneficiarySchema, insertClaimSchema } from \"@shared/schema\";\nimport { goldPriceService } from \"./services/goldPrice\";\nimport { generateCertificatePDF } from \"./services/pdfGenerator\";\nimport { generateQRCode } from \"./services/qrCode\";\nimport { uploadMiddleware } from \"./services/fileUpload\";\nimport multer from \"multer\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes are now handled in setupAuth\n\n  // Gold price API\n  app.get('/api/gold-prices', async (req, res) => {\n    try {\n      const prices = await goldPriceService.getCurrentPrices();\n      res.json(prices);\n    } catch (error) {\n      console.error(\"Error fetching gold prices:\", error);\n      res.status(500).json({ message: \"Failed to fetch gold prices\" });\n    }\n  });\n\n  // Storage plans API\n  app.get('/api/storage-plans', async (req, res) => {\n    try {\n      const plans = await storage.getStoragePlans();\n      res.json(plans);\n    } catch (error) {\n      console.error(\"Error fetching storage plans:\", error);\n      res.status(500).json({ message: \"Failed to fetch storage plans\" });\n    }\n  });\n\n  // Consignment APIs\n  app.post('/api/consignments', isAuthenticated, uploadMiddleware.array('documents', 10), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const consignmentData = insertConsignmentSchema.parse({\n        ...req.body,\n        userId,\n        weight: parseFloat(req.body.weight),\n        purity: parseFloat(req.body.purity),\n        estimatedValue: parseFloat(req.body.estimatedValue),\n      });\n\n      const consignment = await storage.createConsignment(consignmentData);\n      \n      // Generate QR code for tracking\n      const qrCodeUrl = await generateQRCode(consignment.consignmentNumber);\n      \n      // Generate certificate PDF\n      const certificateUrl = await generateCertificatePDF(consignment, qrCodeUrl);\n      \n      res.status(201).json({ ...consignment, certificateUrl });\n    } catch (error) {\n      console.error(\"Error creating consignment:\", error);\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Failed to create consignment\" });\n    }\n  });\n\n  app.get('/api/consignments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const consignments = await storage.getUserConsignments(userId);\n      res.json(consignments);\n    } catch (error) {\n      console.error(\"Error fetching consignments:\", error);\n      res.status(500).json({ message: \"Failed to fetch consignments\" });\n    }\n  });\n\n  app.get('/api/consignments/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const consignment = await storage.getConsignment(req.params.id);\n      \n      if (!consignment || consignment.userId !== userId) {\n        return res.status(404).json({ message: \"Consignment not found\" });\n      }\n      \n      res.json(consignment);\n    } catch (error) {\n      console.error(\"Error fetching consignment:\", error);\n      res.status(500).json({ message: \"Failed to fetch consignment\" });\n    }\n  });\n\n  // Public tracking API\n  app.get('/api/tracking/:consignmentNumber', async (req, res) => {\n    try {\n      const consignment = await storage.getConsignmentByNumber(req.params.consignmentNumber);\n      \n      if (!consignment) {\n        return res.status(404).json({ message: \"Consignment not found\" });\n      }\n      \n      const events = await storage.getConsignmentEvents(consignment.id);\n      \n      res.json({\n        consignment: {\n          id: consignment.id,\n          consignmentNumber: consignment.consignmentNumber,\n          description: consignment.description,\n          status: consignment.status,\n          weight: consignment.weight,\n          createdAt: consignment.createdAt,\n        },\n        events,\n      });\n    } catch (error) {\n      console.error(\"Error fetching tracking info:\", error);\n      res.status(500).json({ message: \"Failed to fetch tracking information\" });\n    }\n  });\n\n  // Digital will APIs\n  app.post('/api/digital-wills', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const willData = insertDigitalWillSchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const digitalWill = await storage.createDigitalWill(willData);\n      res.status(201).json(digitalWill);\n    } catch (error) {\n      console.error(\"Error creating digital will:\", error);\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Failed to create digital will\" });\n    }\n  });\n\n  app.get('/api/digital-wills', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const digitalWill = await storage.getUserDigitalWill(userId);\n      \n      if (!digitalWill) {\n        return res.status(404).json({ message: \"Digital will not found\" });\n      }\n      \n      const beneficiaries = await storage.getWillBeneficiaries(digitalWill.id);\n      res.json({ ...digitalWill, beneficiaries });\n    } catch (error) {\n      console.error(\"Error fetching digital will:\", error);\n      res.status(500).json({ message: \"Failed to fetch digital will\" });\n    }\n  });\n\n  // Beneficiary APIs\n  app.post('/api/beneficiaries', isAuthenticated, async (req: any, res) => {\n    try {\n      const beneficiaryData = insertBeneficiarySchema.parse(req.body);\n      const beneficiary = await storage.addBeneficiary(beneficiaryData);\n      res.status(201).json(beneficiary);\n    } catch (error) {\n      console.error(\"Error adding beneficiary:\", error);\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Failed to add beneficiary\" });\n    }\n  });\n\n  app.delete('/api/beneficiaries/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteBeneficiary(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting beneficiary:\", error);\n      res.status(500).json({ message: \"Failed to delete beneficiary\" });\n    }\n  });\n\n  // Inheritance claims APIs\n  app.post('/api/claims', uploadMiddleware.array('documents', 5), async (req, res) => {\n    try {\n      const claimData = insertClaimSchema.parse({\n        ...req.body,\n        documentUrls: req.files ? (req.files as Express.Multer.File[]).map(file => file.path) : [],\n      });\n\n      const claim = await storage.createClaim(claimData);\n      res.status(201).json(claim);\n    } catch (error) {\n      console.error(\"Error creating claim:\", error);\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Failed to create claim\" });\n    }\n  });\n\n  // Admin APIs\n  app.get('/api/admin/pending-claims', isAdmin, async (req, res) => {\n    try {\n      const claims = await storage.getPendingClaims();\n      res.json(claims);\n    } catch (error) {\n      console.error(\"Error fetching pending claims:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending claims\" });\n    }\n  });\n\n  app.patch('/api/admin/claims/:id/status', isAdmin, async (req, res) => {\n    try {\n      const { status, adminNotes } = req.body;\n      await storage.updateClaimStatus(req.params.id, status, adminNotes);\n      res.json({ message: \"Claim status updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating claim status:\", error);\n      res.status(500).json({ message: \"Failed to update claim status\" });\n    }\n  });\n\n  // Admin User Management Routes\n  app.get('/api/admin/users', isAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post('/api/admin/users', isAdmin, async (req, res) => {\n    try {\n      const { email, password, firstName, lastName, role = 'user' } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      // Hash password\n      const crypto = await import('crypto');\n      const { promisify } = await import('util');\n      const scryptAsync = promisify(crypto.scrypt);\n      const salt = crypto.randomBytes(16).toString('hex');\n      const buf = await scryptAsync(password, salt, 64) as Buffer;\n      const hashedPassword = `${buf.toString('hex')}.${salt}`;\n\n      const user = await storage.createUser({\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n        role,\n      });\n\n      // Don't send password back\n      const { password: _, ...userResponse } = user;\n      res.status(201).json(userResponse);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.patch('/api/admin/users/:id', isAdmin, async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const updates = req.body;\n      \n      // If password is being updated, hash it\n      if (updates.password) {\n        const crypto = await import('crypto');\n        const { promisify } = await import('util');\n        const scryptAsync = promisify(crypto.scrypt);\n        const salt = crypto.randomBytes(16).toString('hex');\n        const buf = await scryptAsync(updates.password, salt, 64) as Buffer;\n        updates.password = `${buf.toString('hex')}.${salt}`;\n      }\n\n      const user = await storage.updateUser(userId, updates);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Don't send password back\n      const { password: _, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete('/api/admin/users/:id', isAdmin, async (req, res) => {\n    try {\n      const userId = req.params.id;\n      await storage.deleteUser(userId);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Account transaction routes for credit/debit\n  app.post('/api/admin/users/:id/credit', isAdmin, async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const { amount, description } = req.body;\n      \n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Valid amount is required\" });\n      }\n\n      const transaction = await storage.createAccountTransaction({\n        userId,\n        type: 'credit',\n        amount: amount.toString(),\n        description: description || 'Account credit by admin',\n        performedBy: req.user.id,\n      });\n\n      res.status(201).json(transaction);\n    } catch (error) {\n      console.error(\"Error crediting account:\", error);\n      res.status(500).json({ message: \"Failed to credit account\" });\n    }\n  });\n\n  app.post('/api/admin/users/:id/debit', isAdmin, async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const { amount, description } = req.body;\n      \n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Valid amount is required\" });\n      }\n\n      const transaction = await storage.createAccountTransaction({\n        userId,\n        type: 'debit',\n        amount: amount.toString(),\n        description: description || 'Account debit by admin',\n        performedBy: req.user.id,\n      });\n\n      res.status(201).json(transaction);\n    } catch (error) {\n      console.error(\"Error debiting account:\", error);\n      res.status(500).json({ message: \"Failed to debit account\" });\n    }\n  });\n\n  app.get('/api/account/balance', isAuthenticated, async (req: any, res) => {\n    try {\n      const balance = await storage.getUserAccountBalance(req.user.id);\n      res.json({ balance });\n    } catch (error) {\n      console.error(\"Error fetching account balance:\", error);\n      res.status(500).json({ message: \"Failed to fetch account balance\" });\n    }\n  });\n\n  app.get('/api/account/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const transactions = await storage.getUserAccountTransactions(req.user.id);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching account transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch account transactions\" });\n    }\n  });\n\n  // Gold holding routes for admin gold management\n  app.post('/api/admin/users/:id/credit-gold', isAdmin, async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const { weight, purity, description, purchasePrice } = req.body;\n      \n      if (!weight || weight <= 0) {\n        return res.status(400).json({ message: \"Valid weight is required\" });\n      }\n      \n      if (!purity || purity <= 0 || purity > 100) {\n        return res.status(400).json({ message: \"Valid purity (0-100%) is required\" });\n      }\n\n      const goldHolding = await storage.createGoldHolding({\n        userId,\n        type: 'credit',\n        weight: weight.toString(),\n        purity: purity.toString(),\n        description: description || 'Gold credit by admin',\n        purchasePrice: purchasePrice ? purchasePrice.toString() : null,\n        performedBy: req.user.id,\n      });\n\n      res.status(201).json(goldHolding);\n    } catch (error) {\n      console.error(\"Error crediting gold:\", error);\n      res.status(500).json({ message: \"Failed to credit gold\" });\n    }\n  });\n\n  app.post('/api/admin/users/:id/debit-gold', isAdmin, async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const { weight, purity, description } = req.body;\n      \n      if (!weight || weight <= 0) {\n        return res.status(400).json({ message: \"Valid weight is required\" });\n      }\n      \n      if (!purity || purity <= 0 || purity > 100) {\n        return res.status(400).json({ message: \"Valid purity (0-100%) is required\" });\n      }\n\n      const goldHolding = await storage.createGoldHolding({\n        userId,\n        type: 'debit',\n        weight: weight.toString(),\n        purity: purity.toString(),\n        description: description || 'Gold debit by admin',\n        purchasePrice: null,\n        performedBy: req.user.id,\n      });\n\n      res.status(201).json(goldHolding);\n    } catch (error) {\n      console.error(\"Error debiting gold:\", error);\n      res.status(500).json({ message: \"Failed to debit gold\" });\n    }\n  });\n\n  app.get('/api/gold/balance', isAuthenticated, async (req: any, res) => {\n    try {\n      const goldBalance = await storage.getUserGoldBalance(req.user.id);\n      res.json(goldBalance);\n    } catch (error) {\n      console.error(\"Error fetching gold balance:\", error);\n      res.status(500).json({ message: \"Failed to fetch gold balance\" });\n    }\n  });\n\n  app.get('/api/gold/holdings', isAuthenticated, async (req: any, res) => {\n    try {\n      const holdings = await storage.getUserGoldHoldings(req.user.id);\n      res.json(holdings);\n    } catch (error) {\n      console.error(\"Error fetching gold holdings:\", error);\n      res.status(500).json({ message: \"Failed to fetch gold holdings\" });\n    }\n  });\n\n  // Chat APIs\n  app.get('/api/chat/:sessionId', async (req, res) => {\n    try {\n      const messages = await storage.getChatMessages(req.params.sessionId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching chat messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat messages\" });\n    }\n  });\n\n  app.post('/api/chat/:sessionId', async (req, res) => {\n    try {\n      const message = await storage.saveChatMessage({\n        sessionId: req.params.sessionId,\n        userId: req.body.userId,\n        isCustomer: req.body.isCustomer,\n        message: req.body.message,\n        attachmentUrls: req.body.attachmentUrls,\n      });\n      res.status(201).json(message);\n    } catch (error) {\n      console.error(\"Error saving chat message:\", error);\n      res.status(500).json({ message: \"Failed to save chat message\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":16577},"server/storage.ts":{"content":"import {\n  users,\n  consignments,\n  consignmentEvents,\n  digitalWills,\n  beneficiaries,\n  inheritanceClaims,\n  chatMessages,\n  accountTransactions,\n  goldHoldings,\n  storagePlans,\n  type User,\n  type UpsertUser,\n  type Consignment,\n  type InsertConsignment,\n  type ConsignmentEvent,\n  type DigitalWill,\n  type InsertDigitalWill,\n  type Beneficiary,\n  type InsertBeneficiary,\n  type InheritanceClaim,\n  type InsertClaim,\n  type ChatMessage,\n  type InsertChatMessage,\n  type AccountTransaction,\n  type InsertAccountTransaction,\n  type GoldHolding,\n  type InsertGoldHolding,\n  type StoragePlan,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations - Required for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  createUser(userData: Omit<UpsertUser, 'id'>): Promise<User>;\n  getUserByEmail(email: string): Promise<User | null>;\n  getAllUsers(): Promise<User[]>;\n  updateUser(id: string, updates: Partial<UpsertUser>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  \n  // Consignment operations\n  createConsignment(consignment: InsertConsignment): Promise<Consignment>;\n  getConsignment(id: string): Promise<Consignment | undefined>;\n  getConsignmentByNumber(number: string): Promise<Consignment | undefined>;\n  getUserConsignments(userId: string): Promise<Consignment[]>;\n  updateConsignmentStatus(id: string, status: string): Promise<void>;\n  \n  // Consignment events\n  addConsignmentEvent(event: Omit<ConsignmentEvent, 'id' | 'timestamp'>): Promise<void>;\n  getConsignmentEvents(consignmentId: string): Promise<ConsignmentEvent[]>;\n  \n  // Digital will operations\n  createDigitalWill(will: InsertDigitalWill): Promise<DigitalWill>;\n  getUserDigitalWill(userId: string): Promise<DigitalWill | undefined>;\n  updateDigitalWillStatus(id: string, status: string): Promise<void>;\n  \n  // Beneficiary operations\n  addBeneficiary(beneficiary: InsertBeneficiary): Promise<Beneficiary>;\n  getWillBeneficiaries(willId: string): Promise<Beneficiary[]>;\n  deleteBeneficiary(id: string): Promise<void>;\n  \n  // Inheritance claims\n  createClaim(claim: InsertClaim): Promise<InheritanceClaim>;\n  getClaim(id: string): Promise<InheritanceClaim | undefined>;\n  getPendingClaims(): Promise<InheritanceClaim[]>;\n  updateClaimStatus(id: string, status: string, adminNotes?: string): Promise<void>;\n  \n  // Chat operations\n  saveChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getChatMessages(sessionId: string): Promise<ChatMessage[]>;\n  \n  // Account transaction operations\n  createAccountTransaction(transaction: InsertAccountTransaction): Promise<AccountTransaction>;\n  getUserAccountTransactions(userId: string): Promise<AccountTransaction[]>;\n  getUserAccountBalance(userId: string): Promise<number>;\n  \n  // Gold holding operations\n  createGoldHolding(holding: InsertGoldHolding): Promise<GoldHolding>;\n  getUserGoldHoldings(userId: string): Promise<GoldHolding[]>;\n  getUserGoldBalance(userId: string): Promise<{totalWeight: number; totalValue: number; avgPurity: number; activeItems: number}>;\n  \n  // Storage plans\n  getStoragePlans(): Promise<StoragePlan[]>;\n  getStoragePlan(id: string): Promise<StoragePlan | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async createUser(userData: Omit<UpsertUser, 'id'>): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, email))\n      .limit(1);\n    return user || null;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async updateUser(id: string, updates: Partial<UpsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  // Consignment operations\n  async createConsignment(consignment: InsertConsignment): Promise<Consignment> {\n    const consignmentNumber = await this.generateConsignmentNumber();\n    const [created] = await db\n      .insert(consignments)\n      .values({\n        ...consignment,\n        consignmentNumber,\n      })\n      .returning();\n    \n    // Add creation event\n    await this.addConsignmentEvent({\n      consignmentId: created.id,\n      eventType: 'created',\n      description: 'Consignment created and submitted for verification',\n      actor: consignment.userId,\n      metadata: { weight: consignment.weight, estimatedValue: consignment.estimatedValue },\n    });\n    \n    return created;\n  }\n\n  async getConsignment(id: string): Promise<Consignment | undefined> {\n    const [consignment] = await db.select().from(consignments).where(eq(consignments.id, id));\n    return consignment;\n  }\n\n  async getConsignmentByNumber(number: string): Promise<Consignment | undefined> {\n    const [consignment] = await db\n      .select()\n      .from(consignments)\n      .where(eq(consignments.consignmentNumber, number));\n    return consignment;\n  }\n\n  async getUserConsignments(userId: string): Promise<Consignment[]> {\n    return db\n      .select()\n      .from(consignments)\n      .where(eq(consignments.userId, userId))\n      .orderBy(desc(consignments.createdAt));\n  }\n\n  async updateConsignmentStatus(id: string, status: string): Promise<void> {\n    await db\n      .update(consignments)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(consignments.id, id));\n  }\n\n  private async generateConsignmentNumber(): Promise<string> {\n    const year = new Date().getFullYear();\n    const timestamp = Date.now().toString().slice(-6);\n    return `GV-${year}-${timestamp}`;\n  }\n\n  // Consignment events\n  async addConsignmentEvent(event: Omit<ConsignmentEvent, 'id' | 'timestamp'>): Promise<void> {\n    await db.insert(consignmentEvents).values(event);\n  }\n\n  async getConsignmentEvents(consignmentId: string): Promise<ConsignmentEvent[]> {\n    return db\n      .select()\n      .from(consignmentEvents)\n      .where(eq(consignmentEvents.consignmentId, consignmentId))\n      .orderBy(desc(consignmentEvents.timestamp));\n  }\n\n  // Digital will operations\n  async createDigitalWill(will: InsertDigitalWill): Promise<DigitalWill> {\n    const [created] = await db\n      .insert(digitalWills)\n      .values(will)\n      .returning();\n    return created;\n  }\n\n  async getUserDigitalWill(userId: string): Promise<DigitalWill | undefined> {\n    const [will] = await db\n      .select()\n      .from(digitalWills)\n      .where(eq(digitalWills.userId, userId));\n    return will;\n  }\n\n  async updateDigitalWillStatus(id: string, status: string): Promise<void> {\n    await db\n      .update(digitalWills)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(digitalWills.id, id));\n  }\n\n  // Beneficiary operations\n  async addBeneficiary(beneficiary: InsertBeneficiary): Promise<Beneficiary> {\n    const [created] = await db\n      .insert(beneficiaries)\n      .values(beneficiary)\n      .returning();\n    return created;\n  }\n\n  async getWillBeneficiaries(willId: string): Promise<Beneficiary[]> {\n    return db\n      .select()\n      .from(beneficiaries)\n      .where(eq(beneficiaries.willId, willId));\n  }\n\n  async deleteBeneficiary(id: string): Promise<void> {\n    await db.delete(beneficiaries).where(eq(beneficiaries.id, id));\n  }\n\n  // Inheritance claims\n  async createClaim(claim: InsertClaim): Promise<InheritanceClaim> {\n    const [created] = await db\n      .insert(inheritanceClaims)\n      .values(claim)\n      .returning();\n    return created;\n  }\n\n  async getClaim(id: string): Promise<InheritanceClaim | undefined> {\n    const [claim] = await db\n      .select()\n      .from(inheritanceClaims)\n      .where(eq(inheritanceClaims.id, id));\n    return claim;\n  }\n\n  async getPendingClaims(): Promise<InheritanceClaim[]> {\n    return db\n      .select()\n      .from(inheritanceClaims)\n      .where(eq(inheritanceClaims.status, 'pending'))\n      .orderBy(desc(inheritanceClaims.createdAt));\n  }\n\n  async updateClaimStatus(id: string, status: string, adminNotes?: string): Promise<void> {\n    const updateData: any = { status, updatedAt: new Date() };\n    if (adminNotes) {\n      updateData.adminNotes = adminNotes;\n    }\n    \n    await db\n      .update(inheritanceClaims)\n      .set(updateData)\n      .where(eq(inheritanceClaims.id, id));\n  }\n\n  // Chat operations\n  async saveChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const [saved] = await db\n      .insert(chatMessages)\n      .values(message)\n      .returning();\n    return saved;\n  }\n\n  async getChatMessages(sessionId: string): Promise<ChatMessage[]> {\n    return db\n      .select()\n      .from(chatMessages)\n      .where(eq(chatMessages.sessionId, sessionId))\n      .orderBy(desc(chatMessages.timestamp));\n  }\n\n  // Storage plans\n  async getStoragePlans(): Promise<StoragePlan[]> {\n    return db\n      .select()\n      .from(storagePlans)\n      .where(eq(storagePlans.active, true));\n  }\n\n  async getStoragePlan(id: string): Promise<StoragePlan | undefined> {\n    const [plan] = await db\n      .select()\n      .from(storagePlans)\n      .where(and(eq(storagePlans.id, id), eq(storagePlans.active, true)));\n    return plan;\n  }\n  // Account transaction operations\n  async createAccountTransaction(transaction: InsertAccountTransaction): Promise<AccountTransaction> {\n    const [accountTransaction] = await db\n      .insert(accountTransactions)\n      .values(transaction)\n      .returning();\n    return accountTransaction;\n  }\n\n  async getUserAccountTransactions(userId: string): Promise<AccountTransaction[]> {\n    return db\n      .select()\n      .from(accountTransactions)\n      .where(eq(accountTransactions.userId, userId))\n      .orderBy(desc(accountTransactions.createdAt));\n  }\n\n  async getUserAccountBalance(userId: string): Promise<number> {\n    const transactions = await this.getUserAccountTransactions(userId);\n    const balance = transactions.reduce((sum, transaction) => {\n      if (transaction.type === 'credit') {\n        return sum + parseFloat(transaction.amount);\n      } else {\n        return sum - parseFloat(transaction.amount);\n      }\n    }, 0);\n    return balance;\n  }\n\n  // Gold holding operations\n  async createGoldHolding(holding: InsertGoldHolding): Promise<GoldHolding> {\n    const [goldHolding] = await db\n      .insert(goldHoldings)\n      .values(holding)\n      .returning();\n    return goldHolding;\n  }\n\n  async getUserGoldHoldings(userId: string): Promise<GoldHolding[]> {\n    return db\n      .select()\n      .from(goldHoldings)\n      .where(eq(goldHoldings.userId, userId))\n      .orderBy(desc(goldHoldings.createdAt));\n  }\n\n  async getUserGoldBalance(userId: string): Promise<{totalWeight: number; totalValue: number; avgPurity: number; activeItems: number}> {\n    const holdings = await this.getUserGoldHoldings(userId);\n    \n    let totalWeight = 0;\n    let totalValue = 0;\n    let totalPurityWeight = 0; // for weighted average purity calculation\n    let activeItems = 0;\n\n    holdings.forEach(holding => {\n      const weight = parseFloat(holding.weight);\n      const purity = parseFloat(holding.purity);\n      const purchasePrice = parseFloat(holding.purchasePrice || '0');\n      \n      if (holding.type === 'credit') {\n        totalWeight += weight;\n        totalValue += purchasePrice;\n        totalPurityWeight += (weight * purity);\n        activeItems++;\n      } else {\n        totalWeight -= weight;\n        totalValue -= purchasePrice;\n        totalPurityWeight -= (weight * purity);\n        activeItems = Math.max(0, activeItems - 1);\n      }\n    });\n\n    const avgPurity = totalWeight > 0 ? totalPurityWeight / totalWeight : 0;\n\n    return {\n      totalWeight: Math.max(0, totalWeight),\n      totalValue: Math.max(0, totalValue),\n      avgPurity: Math.max(0, avgPurity),\n      activeItems: Math.max(0, activeItems)\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":12695},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  boolean,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - Required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - Required for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").default(\"user\").notNull(), // 'user' or 'admin'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Gold consignments table\nexport const consignments = pgTable(\"consignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  consignmentNumber: varchar(\"consignment_number\").unique().notNull(),\n  description: text(\"description\").notNull(),\n  weight: decimal(\"weight\", { precision: 10, scale: 4 }).notNull(),\n  purity: decimal(\"purity\", { precision: 5, scale: 3 }).notNull(),\n  estimatedValue: decimal(\"estimated_value\", { precision: 12, scale: 2 }).notNull(),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, verified, stored, claimed\n  storagePlan: varchar(\"storage_plan\").notNull(), // standard, premium\n  insuranceEnabled: boolean(\"insurance_enabled\").default(true),\n  vaultLocation: varchar(\"vault_location\"),\n  certificateUrl: text(\"certificate_url\"),\n  qrCode: text(\"qr_code\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Consignment audit events\nexport const consignmentEvents = pgTable(\"consignment_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  consignmentId: varchar(\"consignment_id\").notNull().references(() => consignments.id),\n  eventType: varchar(\"event_type\").notNull(), // created, verified, stored, status_changed\n  description: text(\"description\").notNull(),\n  actor: varchar(\"actor\"), // user_id or admin_id\n  metadata: jsonb(\"metadata\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Digital wills table\nexport const digitalWills = pgTable(\"digital_wills\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  status: varchar(\"status\").notNull().default(\"draft\"), // draft, active, executed\n  totalAllocation: integer(\"total_allocation\").default(0), // percentage\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Beneficiaries table\nexport const beneficiaries = pgTable(\"beneficiaries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  willId: varchar(\"will_id\").notNull().references(() => digitalWills.id),\n  fullName: varchar(\"full_name\").notNull(),\n  relationship: varchar(\"relationship\").notNull(),\n  percentage: integer(\"percentage\").notNull(),\n  instructions: text(\"instructions\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Inheritance claims table\nexport const inheritanceClaims = pgTable(\"inheritance_claims\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  willId: varchar(\"will_id\").notNull().references(() => digitalWills.id),\n  beneficiaryId: varchar(\"beneficiary_id\").notNull().references(() => beneficiaries.id),\n  claimantName: varchar(\"claimant_name\").notNull(),\n  claimantEmail: varchar(\"claimant_email\").notNull(),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, under_review, approved, rejected\n  documentUrls: text(\"document_urls\").array(),\n  adminNotes: text(\"admin_notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chat messages table\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  isCustomer: boolean(\"is_customer\").default(true),\n  message: text(\"message\").notNull(),\n  attachmentUrls: text(\"attachment_urls\").array(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Account transactions table for credit/debit functionality\nexport const accountTransactions = pgTable(\"account_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: varchar(\"type\").notNull(), // 'credit' or 'debit'\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  description: text(\"description\").notNull(),\n  performedBy: varchar(\"performed_by\").notNull().references(() => users.id), // admin who performed the action\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Gold holdings table for managing customer gold assets\nexport const goldHoldings = pgTable(\"gold_holdings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: varchar(\"type\").notNull(), // 'credit' or 'debit' \n  weight: decimal(\"weight\", { precision: 10, scale: 4 }).notNull(), // in ounces\n  purity: decimal(\"purity\", { precision: 5, scale: 3 }).notNull(), // percentage (99.9 = 99.9%)\n  description: text(\"description\").notNull(),\n  purchasePrice: decimal(\"purchase_price\", { precision: 12, scale: 2 }), // price at time of acquisition\n  performedBy: varchar(\"performed_by\").notNull().references(() => users.id), // admin who performed the action\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Storage plans table\nexport const storagePlans = pgTable(\"storage_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  annualRate: decimal(\"annual_rate\", { precision: 5, scale: 4 }).notNull(), // as decimal (0.005 = 0.5%)\n  insuranceRate: decimal(\"insurance_rate\", { precision: 5, scale: 4 }).notNull(),\n  setupFee: decimal(\"setup_fee\", { precision: 8, scale: 2 }).notNull(),\n  features: text(\"features\").array(),\n  active: boolean(\"active\").default(true),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  consignments: many(consignments),\n  digitalWills: many(digitalWills),\n}));\n\nexport const consignmentsRelations = relations(consignments, ({ one, many }) => ({\n  user: one(users, {\n    fields: [consignments.userId],\n    references: [users.id],\n  }),\n  events: many(consignmentEvents),\n}));\n\nexport const consignmentEventsRelations = relations(consignmentEvents, ({ one }) => ({\n  consignment: one(consignments, {\n    fields: [consignmentEvents.consignmentId],\n    references: [consignments.id],\n  }),\n}));\n\nexport const digitalWillsRelations = relations(digitalWills, ({ one, many }) => ({\n  user: one(users, {\n    fields: [digitalWills.userId],\n    references: [users.id],\n  }),\n  beneficiaries: many(beneficiaries),\n  claims: many(inheritanceClaims),\n}));\n\nexport const beneficiariesRelations = relations(beneficiaries, ({ one, many }) => ({\n  will: one(digitalWills, {\n    fields: [beneficiaries.willId],\n    references: [digitalWills.id],\n  }),\n  claims: many(inheritanceClaims),\n}));\n\nexport const inheritanceClaimsRelations = relations(inheritanceClaims, ({ one }) => ({\n  will: one(digitalWills, {\n    fields: [inheritanceClaims.willId],\n    references: [digitalWills.id],\n  }),\n  beneficiary: one(beneficiaries, {\n    fields: [inheritanceClaims.beneficiaryId],\n    references: [beneficiaries.id],\n  }),\n}));\n\n// Zod schemas\nexport const insertConsignmentSchema = createInsertSchema(consignments).omit({\n  id: true,\n  consignmentNumber: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDigitalWillSchema = createInsertSchema(digitalWills).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBeneficiarySchema = createInsertSchema(beneficiaries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClaimSchema = createInsertSchema(inheritanceClaims).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAccountTransactionSchema = createInsertSchema(accountTransactions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertConsignment = z.infer<typeof insertConsignmentSchema>;\nexport type Consignment = typeof consignments.$inferSelect;\n\nexport type ConsignmentEvent = typeof consignmentEvents.$inferSelect;\n\nexport type InsertDigitalWill = z.infer<typeof insertDigitalWillSchema>;\nexport type DigitalWill = typeof digitalWills.$inferSelect;\n\nexport type InsertBeneficiary = z.infer<typeof insertBeneficiarySchema>;\nexport type Beneficiary = typeof beneficiaries.$inferSelect;\n\nexport type InsertClaim = z.infer<typeof insertClaimSchema>;\nexport type InheritanceClaim = typeof inheritanceClaims.$inferSelect;\n\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\n\nexport type InsertAccountTransaction = z.infer<typeof insertAccountTransactionSchema>;\nexport type AccountTransaction = typeof accountTransactions.$inferSelect;\n\nexport const insertGoldHoldingSchema = createInsertSchema(goldHoldings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertGoldHolding = z.infer<typeof insertGoldHoldingSchema>;\nexport type GoldHolding = typeof goldHoldings.$inferSelect;\n\nexport type StoragePlan = typeof storagePlans.$inferSelect;\n","size_bytes":10358},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Consignment from \"@/pages/consignment\";\nimport Tracking from \"@/pages/tracking\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Admin from \"@/pages/admin\";\nimport AuthPage from \"@/pages/auth-page\";\n\nfunction Router() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/auth\" component={AuthPage} />\n          <Route path=\"/tracking\" component={Tracking} />\n          <Route path=\"/tracking/:consignmentNumber\" component={Tracking} />\n        </>\n      ) : (user as any)?.role === \"admin\" ? (\n        <>\n          <Route path=\"/\" component={Admin} />\n          <Route path=\"/admin\" component={Admin} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/consignment\" component={Consignment} />\n          <Route path=\"/tracking\" component={Tracking} />\n          <Route path=\"/tracking/:consignmentNumber\" component={Tracking} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1830},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(210, 40%, 8%);\n  --card: hsl(210, 40%, 100%);\n  --card-foreground: hsl(210, 40%, 15%);\n  --popover: hsl(210, 40%, 100%);\n  --popover-foreground: hsl(210, 40%, 15%);\n  --primary: hsl(45, 85%, 47%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(210, 40%, 9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(210, 40%, 45%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(210, 40%, 9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(45, 85%, 47%);\n  --chart-1: hsl(45, 85%, 47%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(210, 40%, 96%);\n  --sidebar-foreground: hsl(210, 40%, 15%);\n  --sidebar-primary: hsl(45, 85%, 47%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(210, 40%, 9%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(45, 85%, 47%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: 'Playfair Display', serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(45, 85%, 47%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(45, 85%, 47%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(45, 85%, 47%, 0.00), 0px 1px 2px -1px hsl(45, 85%, 47%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(45, 85%, 47%, 0.00), 0px 1px 2px -1px hsl(45, 85%, 47%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(45, 85%, 47%, 0.00), 0px 2px 4px -1px hsl(45, 85%, 47%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(45, 85%, 47%, 0.00), 0px 4px 6px -1px hsl(45, 85%, 47%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(45, 85%, 47%, 0.00), 0px 8px 10px -1px hsl(45, 85%, 47%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(45, 85%, 47%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Custom gold color palette */\n  --gold-50: hsl(48, 97%, 97%);\n  --gold-100: hsl(48, 96%, 89%);\n  --gold-200: hsl(48, 97%, 77%);\n  --gold-300: hsl(45, 93%, 68%);\n  --gold-400: hsl(43, 89%, 59%);\n  --gold-500: hsl(45, 85%, 47%);\n  --gold-600: hsl(36, 75%, 44%);\n  --gold-700: hsl(32, 74%, 37%);\n  --gold-800: hsl(28, 69%, 32%);\n  --gold-900: hsl(27, 64%, 29%);\n}\n\n.dark {\n  --background: hsl(210, 40%, 2%);\n  --foreground: hsl(210, 40%, 95%);\n  --card: hsl(210, 40%, 4%);\n  --card-foreground: hsl(210, 40%, 95%);\n  --popover: hsl(210, 40%, 4%);\n  --popover-foreground: hsl(210, 40%, 95%);\n  --primary: hsl(45, 85%, 47%);\n  --primary-foreground: hsl(210, 40%, 2%);\n  --secondary: hsl(210, 40%, 10%);\n  --secondary-foreground: hsl(210, 40%, 95%);\n  --muted: hsl(210, 40%, 10%);\n  --muted-foreground: hsl(210, 40%, 55%);\n  --accent: hsl(210, 40%, 10%);\n  --accent-foreground: hsl(210, 40%, 95%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(210, 40%, 18%);\n  --input: hsl(210, 40%, 18%);\n  --ring: hsl(45, 85%, 47%);\n  --sidebar: hsl(210, 40%, 4%);\n  --sidebar-foreground: hsl(210, 40%, 95%);\n  --sidebar-primary: hsl(45, 85%, 47%);\n  --sidebar-primary-foreground: hsl(210, 40%, 2%);\n  --sidebar-accent: hsl(210, 40%, 10%);\n  --sidebar-accent-foreground: hsl(210, 40%, 95%);\n  --sidebar-border: hsl(210, 40%, 18%);\n  --sidebar-ring: hsl(45, 85%, 47%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .hero-gradient {\n    background: linear-gradient(135deg, rgba(0,0,0,0.8) 0%, rgba(26,26,26,0.9) 100%);\n  }\n  \n  .gold-gradient {\n    background: linear-gradient(135deg, var(--gold-500) 0%, var(--gold-400) 100%);\n  }\n  \n  .gold-shimmer {\n    background: linear-gradient(90deg, var(--gold-500), var(--gold-400), var(--gold-500));\n    background-size: 200% 100%;\n    animation: shimmer 2s infinite;\n  }\n  \n  @keyframes shimmer {\n    0% { background-position: -200% 0; }\n    100% { background-position: 200% 0; }\n  }\n\n  @keyframes fadeIn {\n    from { \n      opacity: 0; \n      transform: translateY(20px); \n    }\n    to { \n      opacity: 1; \n      transform: translateY(0); \n    }\n  }\n  \n  .fade-in {\n    animation: fadeIn 0.6s ease-in;\n  }\n  \n  .chart-container {\n    background: linear-gradient(135deg, rgba(212, 175, 55, 0.05) 0%, rgba(255, 215, 0, 0.1) 100%);\n  }\n}\n","size_bytes":4690},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/fileUpload.ts":{"content":"import multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { Request } from \"express\";\n\n// Create upload directory if it doesn't exist\nconst uploadDir = path.join(process.cwd(), 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\n// Create subdirectories for different file types\nconst subDirs = ['documents', 'certificates', 'qr-codes', 'invoices', 'reports'];\nsubDirs.forEach(dir => {\n  const dirPath = path.join(uploadDir, dir);\n  if (!fs.existsSync(dirPath)) {\n    fs.mkdirSync(dirPath, { recursive: true });\n  }\n});\n\n// Configure multer storage\nconst storage = multer.diskStorage({\n  destination: (req: Request, file: Express.Multer.File, cb) => {\n    // Determine upload directory based on file type or route\n    let uploadPath = path.join(uploadDir, 'documents');\n    \n    if (req.path.includes('certificates')) {\n      uploadPath = path.join(uploadDir, 'certificates');\n    } else if (req.path.includes('claims')) {\n      uploadPath = path.join(uploadDir, 'documents');\n    }\n    \n    cb(null, uploadPath);\n  },\n  filename: (req: Request, file: Express.Multer.File, cb) => {\n    // Generate unique filename with timestamp and random string\n    const timestamp = Date.now();\n    const randomString = Math.random().toString(36).substring(2, 15);\n    const extension = path.extname(file.originalname);\n    const baseName = path.basename(file.originalname, extension).replace(/[^a-zA-Z0-9]/g, '-');\n    \n    const filename = `${baseName}-${timestamp}-${randomString}${extension}`;\n    cb(null, filename);\n  }\n});\n\n// File filter to validate file types\nconst fileFilter = (req: Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\n  // Allowed file types for gold consignment documentation\n  const allowedMimeTypes = [\n    'image/jpeg',\n    'image/jpg', \n    'image/png',\n    'image/webp',\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n  ];\n  \n  const allowedExtensions = ['.jpg', '.jpeg', '.png', '.webp', '.pdf', '.doc', '.docx'];\n  \n  const fileExtension = path.extname(file.originalname).toLowerCase();\n  \n  if (allowedMimeTypes.includes(file.mimetype) && allowedExtensions.includes(fileExtension)) {\n    cb(null, true);\n  } else {\n    cb(new Error(`Invalid file type. Allowed types: ${allowedExtensions.join(', ')}`));\n  }\n};\n\n// Configure multer with size limits and validation\nexport const uploadMiddleware = multer({\n  storage: storage,\n  fileFilter: fileFilter,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB per file\n    files: 10, // Maximum 10 files per upload\n  },\n});\n\n// File validation service\nclass FileUploadService {\n  \n  /**\n   * Validate uploaded file\n   */\n  validateFile(file: Express.Multer.File): boolean {\n    if (!file) return false;\n    \n    // Check file size (10MB limit)\n    if (file.size > 10 * 1024 * 1024) {\n      throw new Error('File size too large. Maximum size is 10MB.');\n    }\n    \n    // Check file type\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'application/pdf'];\n    if (!allowedTypes.includes(file.mimetype)) {\n      throw new Error('Invalid file type. Only JPEG, PNG, WebP, and PDF files are allowed.');\n    }\n    \n    return true;\n  }\n  \n  /**\n   * Get secure file URL\n   */\n  getFileUrl(filename: string, category: string = 'documents'): string {\n    return `/api/files/${category}/${filename}`;\n  }\n  \n  /**\n   * Delete file from storage\n   */\n  async deleteFile(filepath: string): Promise<void> {\n    try {\n      const fullPath = path.join(process.cwd(), filepath);\n      if (fs.existsSync(fullPath)) {\n        fs.unlinkSync(fullPath);\n      }\n    } catch (error) {\n      console.error('Failed to delete file:', error);\n      throw new Error('File deletion failed');\n    }\n  }\n  \n  /**\n   * Move file to different category\n   */\n  async moveFile(currentPath: string, newCategory: string, filename: string): Promise<string> {\n    try {\n      const oldPath = path.join(process.cwd(), currentPath);\n      const newPath = path.join(process.cwd(), 'uploads', newCategory, filename);\n      \n      if (fs.existsSync(oldPath)) {\n        fs.renameSync(oldPath, newPath);\n        return `/uploads/${newCategory}/${filename}`;\n      }\n      \n      throw new Error('Source file not found');\n    } catch (error) {\n      console.error('Failed to move file:', error);\n      throw new Error('File move operation failed');\n    }\n  }\n  \n  /**\n   * Scan file for viruses (placeholder for future implementation)\n   */\n  async scanFile(filepath: string): Promise<boolean> {\n    // In production, this would integrate with antivirus scanning\n    // For now, return true (file is clean)\n    // Could integrate with services like ClamAV, VirusTotal API, etc.\n    \n    try {\n      // Basic file validation\n      const stats = fs.statSync(filepath);\n      \n      // Check if file is not empty\n      if (stats.size === 0) {\n        throw new Error('Empty file detected');\n      }\n      \n      // Additional security checks could be added here\n      // - File signature validation\n      // - Malware scanning\n      // - Content analysis\n      \n      return true;\n    } catch (error) {\n      console.error('File scan failed:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Get file metadata\n   */\n  getFileMetadata(file: Express.Multer.File) {\n    return {\n      originalName: file.originalname,\n      filename: file.filename,\n      mimetype: file.mimetype,\n      size: file.size,\n      uploadDate: new Date(),\n      path: file.path,\n    };\n  }\n  \n  /**\n   * Clean up temporary files\n   */\n  async cleanupTempFiles(maxAge: number = 24 * 60 * 60 * 1000): Promise<void> {\n    try {\n      const tempDir = path.join(process.cwd(), 'uploads', 'temp');\n      \n      if (!fs.existsSync(tempDir)) return;\n      \n      const files = fs.readdirSync(tempDir);\n      const now = Date.now();\n      \n      for (const file of files) {\n        const filePath = path.join(tempDir, file);\n        const stats = fs.statSync(filePath);\n        \n        if (now - stats.mtime.getTime() > maxAge) {\n          fs.unlinkSync(filePath);\n        }\n      }\n    } catch (error) {\n      console.error('Cleanup failed:', error);\n    }\n  }\n}\n\nexport const fileUploadService = new FileUploadService();\n\n// Error handling middleware for multer\nexport const handleUploadError = (error: any, req: any, res: any, next: any) => {\n  if (error instanceof multer.MulterError) {\n    if (error.code === 'LIMIT_FILE_SIZE') {\n      return res.status(400).json({\n        message: 'File too large. Maximum size is 10MB per file.',\n      });\n    }\n    \n    if (error.code === 'LIMIT_FILE_COUNT') {\n      return res.status(400).json({\n        message: 'Too many files. Maximum 10 files per upload.',\n      });\n    }\n    \n    if (error.code === 'LIMIT_UNEXPECTED_FILE') {\n      return res.status(400).json({\n        message: 'Unexpected file field.',\n      });\n    }\n  }\n  \n  if (error.message.includes('Invalid file type')) {\n    return res.status(400).json({\n      message: error.message,\n    });\n  }\n  \n  return res.status(500).json({\n    message: 'File upload failed. Please try again.',\n  });\n};\n\n// Utility function to create safe filenames\nexport function createSafeFilename(originalName: string): string {\n  const extension = path.extname(originalName);\n  const baseName = path.basename(originalName, extension);\n  \n  // Remove special characters and replace with hyphens\n  const safeName = baseName\n    .replace(/[^a-zA-Z0-9]/g, '-')\n    .replace(/-+/g, '-')\n    .replace(/^-|-$/g, '');\n  \n  return `${safeName}${extension}`;\n}\n\n// Export configured multer instance\nexport default uploadMiddleware;\n","size_bytes":7686},"server/services/goldPrice.ts":{"content":"interface GoldPrices {\n  usd: number;\n  gbp: number;\n  eur: number;\n  change24h: {\n    usd: number;\n    gbp: number;\n    eur: number;\n  };\n  lastUpdated: Date;\n}\n\nclass GoldPriceService {\n  private cachedPrices: GoldPrices | null = null;\n  private lastFetch: Date | null = null;\n  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n  async getCurrentPrices(): Promise<GoldPrices> {\n    // Check if we have cached data that's still fresh\n    if (this.cachedPrices && this.lastFetch && \n        Date.now() - this.lastFetch.getTime() < this.CACHE_DURATION) {\n      return this.cachedPrices;\n    }\n\n    try {\n      // In a real implementation, you would call actual gold price APIs\n      // For example: MetalsAPI, LBMA, or similar services\n      const prices = await this.fetchFromAPI();\n      \n      this.cachedPrices = prices;\n      this.lastFetch = new Date();\n      \n      return prices;\n    } catch (error) {\n      console.error('Failed to fetch gold prices:', error);\n      \n      // Return cached data if available, otherwise return default prices\n      if (this.cachedPrices) {\n        return this.cachedPrices;\n      }\n      \n      // Fallback to default prices\n      return this.getDefaultPrices();\n    }\n  }\n\n  private async fetchFromAPI(): Promise<GoldPrices> {\n    // This would typically call a real gold price API\n    // Example APIs: MetalsAPI, CurrencyAPI, LBMA, etc.\n    \n    const API_KEY = process.env.METALS_API_KEY || process.env.GOLD_PRICE_API_KEY;\n    \n    if (API_KEY) {\n      try {\n        // Example implementation for MetalsAPI\n        const response = await fetch(`https://api.metals.live/v1/spot/gold`, {\n          headers: {\n            'Authorization': `Bearer ${API_KEY}`,\n          },\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          return this.transformAPIResponse(data);\n        }\n      } catch (error) {\n        console.error('API request failed:', error);\n      }\n    }\n    \n    // Simulate realistic price movements around base prices\n    const baseUSD = 2034.50;\n    const variation = (Math.random() - 0.5) * 40; // ±$20 variation\n    const usdPrice = baseUSD + variation;\n    \n    // Calculate other currencies with realistic exchange rates\n    const gbpPrice = usdPrice * 0.8; // Approximate GBP rate\n    const eurPrice = usdPrice * 0.92; // Approximate EUR rate\n    \n    // Simulate 24h changes\n    const usdChange = (Math.random() - 0.5) * 4; // ±2% change\n    const gbpChange = usdChange + (Math.random() - 0.5) * 0.5; // Slight variation\n    const eurChange = usdChange + (Math.random() - 0.5) * 0.5; // Slight variation\n    \n    return {\n      usd: parseFloat(usdPrice.toFixed(2)),\n      gbp: parseFloat(gbpPrice.toFixed(2)),\n      eur: parseFloat(eurPrice.toFixed(2)),\n      change24h: {\n        usd: parseFloat(usdChange.toFixed(2)),\n        gbp: parseFloat(gbpChange.toFixed(2)),\n        eur: parseFloat(eurChange.toFixed(2)),\n      },\n      lastUpdated: new Date(),\n    };\n  }\n\n  private transformAPIResponse(data: any): GoldPrices {\n    // Transform the API response to our standard format\n    // This would depend on the specific API being used\n    return {\n      usd: data.price_usd || 2034.50,\n      gbp: data.price_gbp || 1627.80,\n      eur: data.price_eur || 1885.40,\n      change24h: {\n        usd: data.change_24h_usd || 1.2,\n        gbp: data.change_24h_gbp || 0.8,\n        eur: data.change_24h_eur || -0.3,\n      },\n      lastUpdated: new Date(),\n    };\n  }\n\n  private getDefaultPrices(): GoldPrices {\n    return {\n      usd: 2034.50,\n      gbp: 1627.80,\n      eur: 1885.40,\n      change24h: {\n        usd: 1.2,\n        gbp: 0.8,\n        eur: -0.3,\n      },\n      lastUpdated: new Date(),\n    };\n  }\n\n  // Method to get historical prices (for future implementation)\n  async getHistoricalPrices(days: number): Promise<any[]> {\n    // This would implement historical price fetching\n    // For now, return empty array\n    return [];\n  }\n}\n\nexport const goldPriceService = new GoldPriceService();\n","size_bytes":4021},"server/services/pdfGenerator.ts":{"content":"import { Consignment } from \"@shared/schema\";\n\ninterface CertificateData {\n  consignment: Consignment;\n  qrCodeUrl: string;\n  generateDate: Date;\n}\n\nclass PDFGeneratorService {\n  async generateCertificatePDF(consignment: Consignment, qrCodeUrl: string): Promise<string> {\n    try {\n      // In a real implementation, this would use a PDF generation library\n      // such as PDFKit, jsPDF, or Puppeteer\n      \n      const certificateData: CertificateData = {\n        consignment,\n        qrCodeUrl,\n        generateDate: new Date(),\n      };\n\n      // For now, return a placeholder URL\n      // In production, this would:\n      // 1. Generate the actual PDF with company branding\n      // 2. Include QR code for tracking\n      // 3. Add security features like watermarks\n      // 4. Store the PDF in secure storage (S3, etc.)\n      // 5. Return the secure download URL\n      \n      const certificateUrl = await this.createPDFDocument(certificateData);\n      \n      return certificateUrl;\n    } catch (error) {\n      console.error('Failed to generate certificate PDF:', error);\n      throw new Error('Certificate generation failed');\n    }\n  }\n\n  private async createPDFDocument(data: CertificateData): Promise<string> {\n    // This would contain the actual PDF generation logic\n    // using libraries like PDFKit or similar\n    \n    /*\n    Example implementation with PDFKit:\n    \n    const PDFDocument = require('pdfkit');\n    const fs = require('fs');\n    const path = require('path');\n    \n    const doc = new PDFDocument({\n      size: 'A4',\n      margins: { top: 50, left: 50, right: 50, bottom: 50 }\n    });\n    \n    // Company Header\n    doc.fontSize(24)\n       .fillColor('#D4AF37')\n       .text('GoldVault Pro', 50, 50);\n    \n    doc.fontSize(16)\n       .fillColor('#000000')\n       .text('Certificate of Gold Storage', 50, 100);\n    \n    // Certificate Details\n    doc.fontSize(12)\n       .text(`Consignment Number: ${data.consignment.consignmentNumber}`, 50, 150)\n       .text(`Description: ${data.consignment.description}`, 50, 170)\n       .text(`Weight: ${data.consignment.weight} oz`, 50, 190)\n       .text(`Purity: ${data.consignment.purity}%`, 50, 210)\n       .text(`Estimated Value: $${data.consignment.estimatedValue}`, 50, 230)\n       .text(`Storage Plan: ${data.consignment.storagePlan}`, 50, 250)\n       .text(`Issue Date: ${data.generateDate.toLocaleDateString()}`, 50, 270);\n    \n    // QR Code (would embed the actual QR code image)\n    doc.text('Scan QR code for verification:', 50, 320);\n    // doc.image(data.qrCodeUrl, 50, 340, { width: 100 });\n    \n    // Security features, watermarks, etc.\n    doc.fontSize(8)\n       .fillColor('#888888')\n       .text('This certificate is digitally signed and blockchain verified.', 50, 750);\n    \n    // Save to file system or cloud storage\n    const filename = `certificate-${data.consignment.consignmentNumber}.pdf`;\n    const filepath = path.join(process.cwd(), 'uploads', 'certificates', filename);\n    \n    doc.pipe(fs.createWriteStream(filepath));\n    doc.end();\n    \n    return `/uploads/certificates/${filename}`;\n    */\n    \n    // For now, return a placeholder URL\n    const filename = `certificate-${data.consignment.consignmentNumber}.pdf`;\n    return `/api/certificates/${filename}`;\n  }\n\n  async generateInvoicePDF(invoiceData: any): Promise<string> {\n    try {\n      // Similar implementation for invoices\n      // Would include tax calculations, payment terms, etc.\n      \n      const filename = `invoice-${invoiceData.invoiceNumber}.pdf`;\n      return `/api/invoices/${filename}`;\n    } catch (error) {\n      console.error('Failed to generate invoice PDF:', error);\n      throw new Error('Invoice generation failed');\n    }\n  }\n\n  async generateReportPDF(reportData: any): Promise<string> {\n    try {\n      // Implementation for admin reports\n      // Portfolio summaries, audit reports, etc.\n      \n      const filename = `report-${reportData.reportId}.pdf`;\n      return `/api/reports/${filename}`;\n    } catch (error) {\n      console.error('Failed to generate report PDF:', error);\n      throw new Error('Report generation failed');\n    }\n  }\n}\n\nexport const pdfGeneratorService = new PDFGeneratorService();\n\n// Export the function for use in routes\nexport async function generateCertificatePDF(consignment: Consignment, qrCodeUrl: string): Promise<string> {\n  return pdfGeneratorService.generateCertificatePDF(consignment, qrCodeUrl);\n}\n","size_bytes":4422},"server/services/qrCode.ts":{"content":"class QRCodeService {\n  async generateQRCode(data: string): Promise<string> {\n    try {\n      // In a real implementation, this would use a QR code generation library\n      // such as 'qrcode', 'qr-image', or similar\n      \n      /*\n      Example implementation with 'qrcode' library:\n      \n      const QRCode = require('qrcode');\n      const fs = require('fs');\n      const path = require('path');\n      \n      const filename = `qr-${Date.now()}.png`;\n      const filepath = path.join(process.cwd(), 'uploads', 'qr-codes', filename);\n      \n      await QRCode.toFile(filepath, data, {\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF'\n        },\n        width: 256,\n        margin: 1,\n        errorCorrectionLevel: 'M'\n      });\n      \n      return `/uploads/qr-codes/${filename}`;\n      */\n      \n      // For now, return a placeholder URL\n      // The QR code would contain the tracking URL for the consignment\n      const encodedData = encodeURIComponent(data);\n      return `https://api.qrserver.com/v1/create-qr-code/?size=256x256&data=${encodedData}`;\n      \n    } catch (error) {\n      console.error('Failed to generate QR code:', error);\n      throw new Error('QR code generation failed');\n    }\n  }\n\n  async generateTrackingQR(consignmentNumber: string): Promise<string> {\n    // Generate QR code that links to the public tracking page\n    const trackingUrl = `${process.env.BASE_URL || 'https://goldvault.pro'}/tracking/${consignmentNumber}`;\n    return this.generateQRCode(trackingUrl);\n  }\n\n  async generateCertificateQR(certificateId: string): Promise<string> {\n    // Generate QR code for certificate verification\n    const verificationUrl = `${process.env.BASE_URL || 'https://goldvault.pro'}/verify/${certificateId}`;\n    return this.generateQRCode(verificationUrl);\n  }\n\n  async generateAuthQR(sessionId: string): Promise<string> {\n    // Generate QR code for mobile authentication\n    const authData = {\n      type: 'auth',\n      sessionId,\n      timestamp: Date.now(),\n    };\n    return this.generateQRCode(JSON.stringify(authData));\n  }\n\n  validateQRData(data: string): boolean {\n    try {\n      // Validate QR code data format\n      if (data.startsWith('http')) {\n        // URL format\n        new URL(data);\n        return true;\n      } else {\n        // JSON format\n        JSON.parse(data);\n        return true;\n      }\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\nexport const qrCodeService = new QRCodeService();\n\n// Export the function for use in routes\nexport async function generateQRCode(consignmentNumber: string): Promise<string> {\n  return qrCodeService.generateTrackingQR(consignmentNumber);\n}\n","size_bytes":2661},"client/src/components/ChatSupport.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { MessageCircle, X, Send, User, Bot } from \"lucide-react\";\n\nexport default function ChatSupport() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([\n    {\n      id: 1,\n      text: \"Hello! How can I help you with your gold investment today?\",\n      isBot: true,\n      timestamp: new Date(),\n    }\n  ]);\n\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const sendMessage = () => {\n    if (!message.trim()) return;\n\n    const newMessage = {\n      id: messages.length + 1,\n      text: message,\n      isBot: false,\n      timestamp: new Date(),\n    };\n\n    setMessages([...messages, newMessage]);\n    setMessage(\"\");\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botResponse = {\n        id: messages.length + 2,\n        text: \"Thank you for your message. Our gold investment specialists will respond shortly. Is there anything specific about our storage or consignment services you'd like to know?\",\n        isBot: true,\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, botResponse]);\n    }, 1000);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\" data-testid=\"chat-support\">\n      {/* Chat Toggle Button */}\n      <div className=\"relative\">\n        <Button\n          onClick={toggleChat}\n          className={`w-14 h-14 rounded-full shadow-lg transition-all duration-300 ${\n            isOpen ? 'bg-destructive hover:bg-destructive/90' : 'bg-primary hover:bg-primary/90'\n          }`}\n          data-testid=\"chat-toggle\"\n        >\n          {isOpen ? (\n            <X className=\"h-6 w-6 text-primary-foreground\" />\n          ) : (\n            <MessageCircle className=\"h-6 w-6 text-primary-foreground\" />\n          )}\n        </Button>\n\n        {/* Notification Badge */}\n        {!isOpen && (\n          <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center\">\n            <span className=\"text-xs text-white font-bold\">1</span>\n          </div>\n        )}\n      </div>\n\n      {/* Chat Widget */}\n      {isOpen && (\n        <Card className=\"absolute bottom-16 right-0 w-80 h-96 shadow-2xl border border-border transform transition-all duration-300 ease-out\" data-testid=\"chat-widget\">\n          {/* Chat Header */}\n          <CardHeader className=\"bg-primary text-primary-foreground p-4 rounded-t-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mr-3\">\n                  <Bot className=\"h-4 w-4\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold\">Gold Investment Support</p>\n                  <p className=\"text-xs text-primary-foreground/80\">Typically replies in minutes</p>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={toggleChat}\n                className=\"text-primary-foreground/80 hover:text-primary-foreground hover:bg-white/10\"\n                data-testid=\"chat-close\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n\n          {/* Chat Messages */}\n          <CardContent className=\"p-0 flex flex-col h-full\">\n            <div className=\"flex-1 overflow-y-auto p-4 space-y-3 bg-background\" data-testid=\"chat-messages\">\n              {messages.map((msg) => (\n                <div\n                  key={msg.id}\n                  className={`flex ${msg.isBot ? 'justify-start' : 'justify-end'}`}\n                  data-testid={`message-${msg.id}`}\n                >\n                  <div className={`flex items-start max-w-xs ${msg.isBot ? 'flex-row' : 'flex-row-reverse'}`}>\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${\n                      msg.isBot \n                        ? 'bg-primary text-primary-foreground mr-2' \n                        : 'bg-muted text-muted-foreground ml-2'\n                    }`}>\n                      {msg.isBot ? (\n                        <Bot className=\"h-4 w-4\" />\n                      ) : (\n                        <User className=\"h-4 w-4\" />\n                      )}\n                    </div>\n                    <div className={`rounded-lg p-3 ${\n                      msg.isBot \n                        ? 'bg-muted text-foreground' \n                        : 'bg-primary text-primary-foreground'\n                    }`}>\n                      <p className=\"text-sm\">{msg.text}</p>\n                      <p className=\"text-xs mt-1 opacity-70\">\n                        {msg.timestamp.toLocaleTimeString('en-US', { \n                          hour: 'numeric', \n                          minute: '2-digit' \n                        })}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Chat Input */}\n            <div className=\"p-4 border-t border-border bg-card\" data-testid=\"chat-input\">\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Type your message...\"\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  className=\"flex-1 text-sm\"\n                  data-testid=\"chat-message-input\"\n                />\n                <Button \n                  onClick={sendMessage}\n                  disabled={!message.trim()}\n                  size=\"sm\"\n                  data-testid=\"chat-send\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":6336},"client/src/components/Footer.tsx":{"content":"import { Shield, Linkedin, Twitter, Facebook } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  const serviceLinks = [\n    { label: \"Gold Storage\", href: \"#services\" },\n    { label: \"Consignment\", href: \"/consignment\" },\n    { label: \"Digital Inheritance\", href: \"#inheritance\" },\n    { label: \"Investment Advisory\", href: \"#advisory\" },\n    { label: \"Insurance Services\", href: \"#insurance\" },\n  ];\n\n  const supportLinks = [\n    { label: \"Help Center\", href: \"#help\" },\n    { label: \"Contact Us\", href: \"#contact\" },\n    { label: \"Track Consignment\", href: \"/tracking\" },\n    { label: \"Pricing Calculator\", href: \"#pricing\" },\n    { label: \"Live Chat\", href: \"#chat\" },\n  ];\n\n  const legalLinks = [\n    { label: \"Privacy Policy\", href: \"#privacy\" },\n    { label: \"Terms of Service\", href: \"#terms\" },\n    { label: \"GDPR Compliance\", href: \"#gdpr\" },\n  ];\n\n  const handleLinkClick = (href: string) => {\n    if (href.startsWith('#')) {\n      const element = document.querySelector(href);\n      element?.scrollIntoView({ behavior: 'smooth' });\n    } else {\n      window.location.href = href;\n    }\n  };\n\n  return (\n    <footer className=\"bg-card border-t border-border\" data-testid=\"footer\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div className=\"col-span-1 md:col-span-2\" data-testid=\"company-info\">\n            <div className=\"flex items-center mb-4\">\n              <Shield className=\"h-8 w-8 text-primary mr-2\" />\n              <h3 className=\"text-2xl font-serif font-bold text-primary\">\n                GoldVault Pro\n              </h3>\n            </div>\n            <p className=\"text-muted-foreground mb-6 max-w-md\">\n              The world's most trusted platform for secure gold storage, investment, and inheritance planning. \n              Protecting wealth for future generations since 2020.\n            </p>\n            <div className=\"flex space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                onClick={() => window.open('#', '_blank')}\n                data-testid=\"social-linkedin\"\n              >\n                <Linkedin className=\"h-5 w-5\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                onClick={() => window.open('#', '_blank')}\n                data-testid=\"social-twitter\"\n              >\n                <Twitter className=\"h-5 w-5\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                onClick={() => window.open('#', '_blank')}\n                data-testid=\"social-facebook\"\n              >\n                <Facebook className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n          \n          {/* Services Links */}\n          <div data-testid=\"services-links\">\n            <h4 className=\"font-semibold mb-4\">Services</h4>\n            <ul className=\"space-y-2\">\n              {serviceLinks.map((link, index) => (\n                <li key={index}>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"text-muted-foreground hover:text-foreground text-sm transition-colors p-0 h-auto justify-start\"\n                    onClick={() => handleLinkClick(link.href)}\n                    data-testid={`service-link-${index}`}\n                  >\n                    {link.label}\n                  </Button>\n                </li>\n              ))}\n            </ul>\n          </div>\n          \n          {/* Support Links */}\n          <div data-testid=\"support-links\">\n            <h4 className=\"font-semibold mb-4\">Support</h4>\n            <ul className=\"space-y-2\">\n              {supportLinks.map((link, index) => (\n                <li key={index}>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"text-muted-foreground hover:text-foreground text-sm transition-colors p-0 h-auto justify-start\"\n                    onClick={() => handleLinkClick(link.href)}\n                    data-testid={`support-link-${index}`}\n                  >\n                    {link.label}\n                  </Button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n        \n        {/* Footer Bottom */}\n        <div className=\"border-t border-border mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\" data-testid=\"footer-bottom\">\n          <div className=\"text-sm text-muted-foreground mb-4 md:mb-0\">\n            © {currentYear} GoldVault Pro. All rights reserved. |{' '}\n            {legalLinks.map((link, index) => (\n              <span key={index}>\n                <Button\n                  variant=\"ghost\"\n                  className=\"text-muted-foreground hover:text-foreground p-0 h-auto text-sm\"\n                  onClick={() => handleLinkClick(link.href)}\n                  data-testid={`legal-link-${index}`}\n                >\n                  {link.label}\n                </Button>\n                {index < legalLinks.length - 1 && ' | '}\n              </span>\n            ))}\n          </div>\n          <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\" data-testid=\"security-badges\">\n            <span className=\"flex items-center\">\n              <Shield className=\"h-4 w-4 text-green-600 mr-1\" />\n              SSL Secured\n            </span>\n            <span className=\"flex items-center\">\n              <Shield className=\"h-4 w-4 text-green-600 mr-1\" />\n              Bank-Grade Security\n            </span>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6087},"client/src/components/HeroCarousel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight, Play } from \"lucide-react\";\n\ninterface HeroCarouselProps {\n  onStartConsignment: () => void;\n  onViewPricing: () => void;\n}\n\ninterface Slide {\n  title: string;\n  subtitle: string;\n  description: string;\n  primaryAction: string;\n  secondaryAction: string;\n  image: string;\n}\n\nexport default function HeroCarousel({ onStartConsignment, onViewPricing }: HeroCarouselProps) {\n  const [currentSlide, setCurrentSlide] = useState(0);\n\n  const slides: Slide[] = [\n    {\n      title: \"Secure Your Gold Legacy\",\n      subtitle: \"Professional gold storage and investment services\",\n      description: \"World-class security, comprehensive insurance, and seamless inheritance planning for your precious metals portfolio.\",\n      primaryAction: \"Consign Gold Now\",\n      secondaryAction: \"View Pricing Plans\",\n      image: \"https://images.unsplash.com/photo-1576086213369-97a306d36557?ixlib=rb-4.0.3&auto=format&fit=crop&w=2000&h=1000\"\n    },\n    {\n      title: \"Bank-Grade Security\",\n      subtitle: \"State-of-the-art vault facilities\",\n      description: \"24/7 monitoring, biometric access, and climate-controlled storage in certified secure facilities across multiple locations.\",\n      primaryAction: \"Learn About Security\",\n      secondaryAction: \"Schedule Tour\",\n      image: \"https://images.unsplash.com/photo-1551836022-deb4988cc6c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=2000&h=1000\"\n    },\n    {\n      title: \"Digital Inheritance Planning\",\n      subtitle: \"Secure your family's future\",\n      description: \"Advanced digital will creation and inheritance management to ensure your gold assets are passed down according to your wishes.\",\n      primaryAction: \"Create Digital Will\",\n      secondaryAction: \"Learn More\",\n      image: \"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?ixlib=rb-4.0.3&auto=format&fit=crop&w=2000&h=1000\"\n    }\n  ];\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentSlide((prev) => (prev + 1) % slides.length);\n    }, 6000);\n\n    return () => clearInterval(timer);\n  }, [slides.length]);\n\n  const nextSlide = () => {\n    setCurrentSlide((prev) => (prev + 1) % slides.length);\n  };\n\n  const prevSlide = () => {\n    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);\n  };\n\n  const goToSlide = (index: number) => {\n    setCurrentSlide(index);\n  };\n\n  const handlePrimaryAction = () => {\n    if (currentSlide === 0) {\n      onStartConsignment();\n    } else if (currentSlide === 1) {\n      // Scroll to services section\n      document.getElementById('services')?.scrollIntoView({ behavior: 'smooth' });\n    } else {\n      // Scroll to inheritance section or open inheritance planning\n      onStartConsignment();\n    }\n  };\n\n  const handleSecondaryAction = () => {\n    if (currentSlide === 0) {\n      onViewPricing();\n    } else {\n      // For other slides, scroll to relevant sections or show more info\n      onViewPricing();\n    }\n  };\n\n  return (\n    <section className=\"relative h-screen overflow-hidden\" data-testid=\"hero-carousel\">\n      {/* Slides */}\n      {slides.map((slide, index) => (\n        <div\n          key={index}\n          className={`absolute inset-0 transition-opacity duration-1000 ${index === currentSlide ? 'opacity-100' : 'opacity-0'}`}\n          style={{\n            backgroundImage: `url('${slide.image}')`,\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n          }}\n          data-testid={`slide-${index}`}\n        >\n          <div className=\"hero-gradient absolute inset-0\"></div>\n          <div className=\"relative h-full flex items-center justify-center text-center\">\n            <div className=\"max-w-4xl mx-auto px-4\">\n              <div className=\"fade-in\">\n                <h1 className=\"text-5xl md:text-7xl font-serif font-bold text-white mb-6\">\n                  {slide.title.split(' ').map((word, wordIndex) => (\n                    <span key={wordIndex}>\n                      {word === 'Gold' || word === 'Legacy' || word === 'Security' || word === 'Inheritance' ? (\n                        <span className=\"text-primary\">{word}</span>\n                      ) : (\n                        word\n                      )}\n                      {wordIndex < slide.title.split(' ').length - 1 && ' '}\n                    </span>\n                  ))}\n                </h1>\n                <p className=\"text-xl md:text-2xl text-gray-200 mb-4\">\n                  {slide.subtitle}\n                </p>\n                <p className=\"text-lg text-gray-300 mb-8 max-w-2xl mx-auto\">\n                  {slide.description}\n                </p>\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                  <Button\n                    onClick={handlePrimaryAction}\n                    className=\"bg-primary hover:bg-primary/90 text-primary-foreground px-8 py-4 rounded-lg font-semibold text-lg transition-all transform hover:scale-105\"\n                    data-testid=\"hero-primary-action\"\n                  >\n                    <Play className=\"h-5 w-5 mr-2\" />\n                    {slide.primaryAction}\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleSecondaryAction}\n                    className=\"border-2 border-primary text-primary hover:bg-primary hover:text-primary-foreground px-8 py-4 rounded-lg font-semibold text-lg transition-all\"\n                    data-testid=\"hero-secondary-action\"\n                  >\n                    {slide.secondaryAction}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n\n      {/* Navigation Arrows */}\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-white hover:bg-white/20 h-12 w-12\"\n        onClick={prevSlide}\n        data-testid=\"carousel-prev\"\n      >\n        <ChevronLeft className=\"h-6 w-6\" />\n      </Button>\n\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-white hover:bg-white/20 h-12 w-12\"\n        onClick={nextSlide}\n        data-testid=\"carousel-next\"\n      >\n        <ChevronRight className=\"h-6 w-6\" />\n      </Button>\n\n      {/* Slide Indicators */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-2\" data-testid=\"carousel-indicators\">\n        {slides.map((_, index) => (\n          <button\n            key={index}\n            className={`w-3 h-3 rounded-full transition-all duration-300 ${\n              index === currentSlide ? 'bg-primary scale-125' : 'bg-white/50 hover:bg-white/70'\n            }`}\n            onClick={() => goToSlide(index)}\n            data-testid={`indicator-${index}`}\n          />\n        ))}\n      </div>\n\n      {/* Auto-play indicator */}\n      <div className=\"absolute bottom-20 left-1/2 transform -translate-x-1/2\">\n        <div className=\"bg-black/30 backdrop-blur-sm rounded-full px-3 py-1 text-white/80 text-sm\">\n          Auto-advancing in {6}s\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7261},"client/src/components/LivePrices.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TrendingUp, TrendingDown, DollarSign, PoundSterling, Euro, RefreshCw } from \"lucide-react\";\n\nexport default function LivePrices() {\n  const { data: goldPrices, isLoading, error, refetch } = useQuery({\n    queryKey: [\"/api/gold-prices\"],\n    refetchInterval: 60000, // Refetch every minute\n  });\n\n  if (error) {\n    return (\n      <section className=\"py-16 bg-background\" data-testid=\"live-prices-error\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl md:text-4xl font-serif font-bold mb-4\">Live Gold Market Prices</h2>\n            <div className=\"bg-card rounded-2xl shadow-lg border border-border p-8\">\n              <div className=\"text-center text-muted-foreground\">\n                <RefreshCw className=\"h-16 w-16 mx-auto mb-4\" />\n                <p>Unable to load current gold prices. Please try again later.</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const prices = goldPrices || {\n    usd: 2034.50,\n    gbp: 1627.80,\n    eur: 1885.40,\n    change24h: {\n      usd: 1.2,\n      gbp: 0.8,\n      eur: -0.3,\n    }\n  };\n\n  const formatChange = (change: number) => {\n    const isPositive = change >= 0;\n    return {\n      value: Math.abs(change).toFixed(1),\n      isPositive,\n      icon: isPositive ? TrendingUp : TrendingDown,\n      color: isPositive ? 'text-green-600' : 'text-red-600',\n    };\n  };\n\n  return (\n    <section className=\"py-16 bg-background\" data-testid=\"live-prices\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-serif font-bold mb-4\">Live Gold Market Prices</h2>\n          <p className=\"text-muted-foreground text-lg\">Real-time pricing from LBMA and COMEX exchanges</p>\n        </div>\n        \n        <div className=\"bg-card rounded-2xl shadow-lg border border-border p-6 md:p-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* USD Price */}\n            <Card className=\"bg-muted\" data-testid=\"price-usd\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center\">\n                  <div className=\"flex items-center justify-center mb-2\">\n                    <DollarSign className=\"h-6 w-6 text-primary mr-2\" />\n                    <span className=\"text-sm font-medium text-muted-foreground\">USD</span>\n                  </div>\n                  <div className=\"text-3xl font-bold mb-2\">\n                    ${isLoading ? '...' : prices.usd.toFixed(2)}\n                  </div>\n                  {!isLoading && prices.change24h?.usd !== undefined && (\n                    <div className={`flex items-center justify-center ${formatChange(prices.change24h.usd).color}`}>\n                      {(() => {\n                        const change = formatChange(prices.change24h.usd);\n                        const Icon = change.icon;\n                        return (\n                          <>\n                            <Icon className=\"h-4 w-4 mr-1\" />\n                            <span className=\"text-sm\">\n                              {change.isPositive ? '+' : '-'}{change.value}%\n                            </span>\n                          </>\n                        );\n                      })()}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* GBP Price */}\n            <Card className=\"bg-muted\" data-testid=\"price-gbp\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center\">\n                  <div className=\"flex items-center justify-center mb-2\">\n                    <PoundSterling className=\"h-6 w-6 text-primary mr-2\" />\n                    <span className=\"text-sm font-medium text-muted-foreground\">GBP</span>\n                  </div>\n                  <div className=\"text-3xl font-bold mb-2\">\n                    £{isLoading ? '...' : prices.gbp.toFixed(2)}\n                  </div>\n                  {!isLoading && prices.change24h?.gbp !== undefined && (\n                    <div className={`flex items-center justify-center ${formatChange(prices.change24h.gbp).color}`}>\n                      {(() => {\n                        const change = formatChange(prices.change24h.gbp);\n                        const Icon = change.icon;\n                        return (\n                          <>\n                            <Icon className=\"h-4 w-4 mr-1\" />\n                            <span className=\"text-sm\">\n                              {change.isPositive ? '+' : '-'}{change.value}%\n                            </span>\n                          </>\n                        );\n                      })()}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* EUR Price */}\n            <Card className=\"bg-muted\" data-testid=\"price-eur\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center\">\n                  <div className=\"flex items-center justify-center mb-2\">\n                    <Euro className=\"h-6 w-6 text-primary mr-2\" />\n                    <span className=\"text-sm font-medium text-muted-foreground\">EUR</span>\n                  </div>\n                  <div className=\"text-3xl font-bold mb-2\">\n                    €{isLoading ? '...' : prices.eur.toFixed(2)}\n                  </div>\n                  {!isLoading && prices.change24h?.eur !== undefined && (\n                    <div className={`flex items-center justify-center ${formatChange(prices.change24h.eur).color}`}>\n                      {(() => {\n                        const change = formatChange(prices.change24h.eur);\n                        const Icon = change.icon;\n                        return (\n                          <>\n                            <Icon className=\"h-4 w-4 mr-1\" />\n                            <span className=\"text-sm\">\n                              {change.isPositive ? '+' : '-'}{change.value}%\n                            </span>\n                          </>\n                        );\n                      })()}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Price Chart Placeholder */}\n          <div className=\"mt-8 chart-container rounded-xl p-6\" data-testid=\"price-chart\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">24-Hour Price Movement</h3>\n              <div className=\"text-sm text-muted-foreground\">\n                Last updated: {isLoading ? 'Loading...' : 'Just now'}\n              </div>\n            </div>\n            <div className=\"h-64 bg-background/50 rounded-lg flex items-center justify-center\">\n              <div className=\"text-center\">\n                <TrendingUp className=\"h-16 w-16 text-primary mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">\n                  {isLoading ? 'Loading price chart...' : 'Interactive price chart - Real-time market data'}\n                </p>\n                {!isLoading && (\n                  <div className=\"mt-4 grid grid-cols-3 gap-4 text-sm\">\n                    <div className=\"text-center\">\n                      <div className=\"font-semibold\">24h High</div>\n                      <div className=\"text-green-600\">${(prices.usd * 1.015).toFixed(2)}</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"font-semibold\">24h Low</div>\n                      <div className=\"text-red-600\">${(prices.usd * 0.995).toFixed(2)}</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"font-semibold\">Volume</div>\n                      <div className=\"text-muted-foreground\">1.2M oz</div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":8362},"client/src/components/Navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Shield, Menu, LogOut, User, BarChart3 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface NavigationProps {\n  goldPrice: number;\n  onLogin: () => void;\n  onRegister: () => void;\n  user?: any;\n}\n\nexport default function Navigation({ goldPrice, onLogin, onRegister, user }: NavigationProps) {\n  const [, setLocation] = useLocation();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const handleLogout = async () => {\n    try {\n      await fetch(\"/api/logout\", { method: \"POST\" });\n      window.location.href = \"/auth\";\n    } catch (error) {\n      window.location.href = \"/auth\";\n    }\n  };\n\n  const navItems = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/#services\", label: \"Services\" },\n    { href: \"/#pricing\", label: \"Pricing\" },\n    { href: \"/tracking\", label: \"Tracking\" },\n    { href: \"/#about\", label: \"About\" },\n  ];\n\n  const userNavItems = user ? [] : navItems;\n\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-50 backdrop-blur-sm bg-opacity-95\" data-testid=\"navigation\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <Button \n                variant=\"ghost\" \n                className=\"text-2xl font-serif font-bold text-primary p-0 hover:bg-transparent\"\n                onClick={() => setLocation(\"/\")}\n                data-testid=\"logo\"\n              >\n                <Shield className=\"h-6 w-6 mr-2\" />\n                GoldVault Pro\n              </Button>\n            </div>\n            \n            {/* Desktop Navigation */}\n            <div className=\"hidden md:block ml-10\">\n              <div className=\"flex items-baseline space-x-8\">\n                {userNavItems.map((item, index) => (\n                  <Button\n                    key={item.href}\n                    variant=\"ghost\"\n                    className={`text-muted-foreground hover:text-foreground px-3 py-2 text-sm transition-colors ${index === 0 ? 'text-primary font-medium' : ''}`}\n                    onClick={() => {\n                      if (item.href.startsWith('/#')) {\n                        const element = document.querySelector(item.href.substring(1));\n                        element?.scrollIntoView({ behavior: 'smooth' });\n                      } else {\n                        setLocation(item.href);\n                      }\n                    }}\n                    data-testid={`nav-${item.label.toLowerCase()}`}\n                  >\n                    {item.label}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Right side items */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            {/* Gold Price Display */}\n            <div className=\"flex items-center bg-muted rounded-lg px-3 py-1\" data-testid=\"gold-price-display\">\n              <span className=\"text-2xl text-primary mr-2\">🪙</span>\n              <span className=\"text-sm font-medium\">\n                Gold: ${goldPrice.toFixed(2)}/oz\n              </span>\n            </div>\n\n            {/* User Authentication */}\n            {user ? (\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setLocation(\"/dashboard\")}\n                  className=\"flex items-center\"\n                  data-testid=\"user-menu\"\n                >\n                  <User className=\"h-4 w-4 mr-2\" />\n                  {user.firstName || user.email || 'Account'}\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  onClick={handleLogout}\n                  size=\"sm\"\n                  data-testid=\"logout-button\"\n                >\n                  <LogOut className=\"h-4 w-4 mr-1\" />\n                  Logout\n                </Button>\n              </div>\n            ) : (\n              <>\n                <Button\n                  variant=\"ghost\"\n                  onClick={onLogin}\n                  className=\"text-muted-foreground hover:text-foreground font-medium text-sm\"\n                  data-testid=\"login-button\"\n                >\n                  Login\n                </Button>\n                <Button\n                  onClick={onRegister}\n                  className=\"bg-primary hover:bg-primary/90 text-primary-foreground px-4 py-2 rounded-lg font-medium text-sm transition-colors\"\n                  data-testid=\"register-button\"\n                >\n                  Get Started\n                </Button>\n              </>\n            )}\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <Sheet open={isMenuOpen} onOpenChange={setIsMenuOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"mobile-menu-trigger\">\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-80\" data-testid=\"mobile-menu\">\n                <div className=\"flex flex-col space-y-4 mt-8\">\n                  {/* Gold Price (Mobile) */}\n                  <div className=\"flex items-center bg-muted rounded-lg px-3 py-2 mb-4\">\n                    <span className=\"text-xl text-primary mr-2\">🪙</span>\n                    <span className=\"text-sm font-medium\">\n                      Gold: ${goldPrice.toFixed(2)}/oz\n                    </span>\n                  </div>\n\n                  {/* Navigation Items */}\n                  {userNavItems.map((item) => (\n                    <Button\n                      key={item.href}\n                      variant=\"ghost\"\n                      className=\"justify-start\"\n                      onClick={() => {\n                        if (item.href.startsWith('/#')) {\n                          const element = document.querySelector(item.href.substring(1));\n                          element?.scrollIntoView({ behavior: 'smooth' });\n                        } else {\n                          setLocation(item.href);\n                        }\n                        setIsMenuOpen(false);\n                      }}\n                      data-testid={`mobile-nav-${item.label.toLowerCase()}`}\n                    >\n                      {item.label}\n                    </Button>\n                  ))}\n\n                  {/* User Actions (Mobile) */}\n                  <div className=\"border-t border-border pt-4 mt-4\">\n                    {user ? (\n                      <div className=\"space-y-2\">\n                        <Button\n                          variant=\"ghost\"\n                          className=\"w-full justify-start\"\n                          onClick={() => {\n                            setLocation(\"/dashboard\");\n                            setIsMenuOpen(false);\n                          }}\n                          data-testid=\"mobile-dashboard\"\n                        >\n                          <User className=\"h-4 w-4 mr-2\" />\n                          {user.firstName || user.email || 'Account'}\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          className=\"w-full justify-start\"\n                          onClick={() => {\n                            setLocation(\"/admin\");\n                            setIsMenuOpen(false);\n                          }}\n                          data-testid=\"mobile-admin\"\n                        >\n                          <BarChart3 className=\"h-4 w-4 mr-2\" />\n                          Admin\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          className=\"w-full justify-start\"\n                          onClick={handleLogout}\n                          data-testid=\"mobile-logout\"\n                        >\n                          <LogOut className=\"h-4 w-4 mr-2\" />\n                          Logout\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-2\">\n                        <Button\n                          variant=\"ghost\"\n                          className=\"w-full justify-start\"\n                          onClick={() => {\n                            onLogin();\n                            setIsMenuOpen(false);\n                          }}\n                          data-testid=\"mobile-login\"\n                        >\n                          Login\n                        </Button>\n                        <Button\n                          className=\"w-full\"\n                          onClick={() => {\n                            onRegister();\n                            setIsMenuOpen(false);\n                          }}\n                          data-testid=\"mobile-register\"\n                        >\n                          Get Started\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":9482},"client/src/components/PricingCalculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { CheckCircle, DollarSign, Info } from \"lucide-react\";\n\ninterface PricingCalculatorProps {\n  onGetQuote: () => void;\n}\n\nexport default function PricingCalculator({ onGetQuote }: PricingCalculatorProps) {\n  const [goldValue, setGoldValue] = useState(50000);\n  const [duration, setDuration] = useState(12);\n  const [insurance, setInsurance] = useState(true);\n  const [storagePlan, setStoragePlan] = useState(\"standard\");\n\n  const [costs, setCosts] = useState({\n    storageFee: 0,\n    insuranceFee: 0,\n    setupFee: 25,\n    totalCost: 0,\n  });\n\n  useEffect(() => {\n    const baseRate = storagePlan === \"standard\" ? 0.005 : 0.008; // 0.5% or 0.8% annually\n    const insuranceRate = 0.001; // 0.1% annually\n    \n    const storageFee = (goldValue * baseRate * duration) / 12;\n    const insuranceFee = insurance ? (goldValue * insuranceRate * duration) / 12 : 0;\n    const totalCost = storageFee + insuranceFee + costs.setupFee;\n\n    setCosts({\n      storageFee,\n      insuranceFee,\n      setupFee: 25,\n      totalCost,\n    });\n  }, [goldValue, duration, insurance, storagePlan]);\n\n  return (\n    <section id=\"pricing\" className=\"py-20 bg-background\" data-testid=\"pricing-calculator\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-serif font-bold mb-6\">Storage Pricing Calculator</h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Transparent pricing based on value and storage duration. Calculate your costs instantly.\n          </p>\n        </div>\n        \n        <div className=\"bg-card rounded-2xl shadow-lg border border-border p-8 md:p-12 max-w-4xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {/* Calculator Form */}\n            <div data-testid=\"calculator-form\">\n              <h3 className=\"text-xl font-semibold mb-6\">Calculate Your Storage Costs</h3>\n              \n              <div className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"goldValue\">Gold Value (USD)</Label>\n                  <div className=\"relative mt-1\">\n                    <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"goldValue\"\n                      type=\"number\"\n                      className=\"pl-8\"\n                      placeholder=\"50,000\"\n                      value={goldValue}\n                      onChange={(e) => setGoldValue(parseInt(e.target.value) || 0)}\n                      min=\"1000\"\n                      step=\"1000\"\n                      data-testid=\"input-gold-value\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"duration\">Storage Duration</Label>\n                  <Select value={duration.toString()} onValueChange={(value) => setDuration(parseInt(value))}>\n                    <SelectTrigger className=\"mt-1\" data-testid=\"select-duration\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"6\">6 months</SelectItem>\n                      <SelectItem value=\"12\">12 months</SelectItem>\n                      <SelectItem value=\"24\">24 months</SelectItem>\n                      <SelectItem value=\"36\">36 months</SelectItem>\n                      <SelectItem value=\"60\">60 months</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label>Insurance Coverage</Label>\n                  <div className=\"flex items-center space-x-2 mt-2\">\n                    <Checkbox \n                      id=\"insurance\"\n                      checked={insurance}\n                      onCheckedChange={(checked) => setInsurance(!!checked)}\n                      data-testid=\"checkbox-insurance\"\n                    />\n                    <Label htmlFor=\"insurance\" className=\"text-sm\">\n                      Full Value Insurance (+0.1% annually)\n                    </Label>\n                  </div>\n                </div>\n                \n                <div>\n                  <Label>Storage Plan</Label>\n                  <div className=\"space-y-2 mt-2\">\n                    <label className=\"flex items-center p-3 border border-border rounded-lg hover:bg-muted cursor-pointer\">\n                      <input \n                        type=\"radio\" \n                        name=\"plan\" \n                        value=\"standard\" \n                        checked={storagePlan === \"standard\"}\n                        onChange={(e) => setStoragePlan(e.target.value)}\n                        className=\"mr-3 text-primary\" \n                        data-testid=\"radio-standard\"\n                      />\n                      <div>\n                        <div className=\"font-medium\">Standard</div>\n                        <div className=\"text-sm text-muted-foreground\">0.5% annually + insurance</div>\n                      </div>\n                    </label>\n                    <label className=\"flex items-center p-3 border border-border rounded-lg hover:bg-muted cursor-pointer\">\n                      <input \n                        type=\"radio\" \n                        name=\"plan\" \n                        value=\"premium\" \n                        checked={storagePlan === \"premium\"}\n                        onChange={(e) => setStoragePlan(e.target.value)}\n                        className=\"mr-3 text-primary\" \n                        data-testid=\"radio-premium\"\n                      />\n                      <div>\n                        <div className=\"font-medium\">Premium</div>\n                        <div className=\"text-sm text-muted-foreground\">0.8% annually + premium insurance</div>\n                      </div>\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Cost Breakdown */}\n            <div className=\"bg-muted rounded-xl p-6\" data-testid=\"cost-breakdown\">\n              <h3 className=\"text-xl font-semibold mb-6\">Cost Breakdown</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span>Storage Fee ({duration} months)</span>\n                  <span className=\"font-semibold\" data-testid=\"cost-storage\">\n                    ${costs.storageFee.toFixed(2)}\n                  </span>\n                </div>\n                \n                {insurance && (\n                  <div className=\"flex justify-between\">\n                    <span>Insurance ({duration} months)</span>\n                    <span className=\"font-semibold\" data-testid=\"cost-insurance\">\n                      ${costs.insuranceFee.toFixed(2)}\n                    </span>\n                  </div>\n                )}\n                \n                <div className=\"flex justify-between\">\n                  <span>Setup Fee</span>\n                  <span className=\"font-semibold\">${costs.setupFee.toFixed(2)}</span>\n                </div>\n                \n                <hr className=\"border-border\" />\n                \n                <div className=\"flex justify-between text-lg\">\n                  <span className=\"font-bold\">Total Cost</span>\n                  <span className=\"font-bold text-primary\" data-testid=\"cost-total\">\n                    ${costs.totalCost.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"mt-6 p-4 bg-primary/10 rounded-lg\" data-testid=\"included-features\">\n                <div className=\"flex items-center mb-2\">\n                  <Info className=\"h-4 w-4 text-primary mr-2\" />\n                  <span className=\"font-medium\">Includes:</span>\n                </div>\n                <ul className=\"text-sm space-y-1 ml-6\">\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-3 w-3 text-green-600 mr-2\" />\n                    24/7 vault monitoring\n                  </li>\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-3 w-3 text-green-600 mr-2\" />\n                    Individual allocation\n                  </li>\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-3 w-3 text-green-600 mr-2\" />\n                    Digital certificates\n                  </li>\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-3 w-3 text-green-600 mr-2\" />\n                    Online tracking\n                  </li>\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-3 w-3 text-green-600 mr-2\" />\n                    Free annual inspection\n                  </li>\n                </ul>\n              </div>\n              \n              <Button \n                className=\"w-full mt-6\" \n                onClick={onGetQuote}\n                data-testid=\"button-get-quote\"\n              >\n                Get Official Quote\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9787},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":252},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport AdminNavigation from \"@/components/AdminNavigation\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Package, \n  Gavel, \n  Coins, \n  TrendingUp,\n  Plus,\n  CheckCircle,\n  AlertTriangle,\n  FileText,\n  MessageSquare,\n  BarChart3,\n  Shield,\n  Clock,\n  User,\n  Calendar,\n  Edit,\n  Trash2,\n  Save,\n  X\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\n\n// User Management Component\nfunction UserManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<any>(null);\n  const [creditDebitDialogOpen, setCreditDebitDialogOpen] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState<string>('');\n  const [transactionType, setTransactionType] = useState<'credit' | 'debit'>('credit');\n  const [transactionAmount, setTransactionAmount] = useState('');\n  const [transactionDescription, setTransactionDescription] = useState('');\n  const [goldDialogOpen, setGoldDialogOpen] = useState(false);\n  const [goldTransactionType, setGoldTransactionType] = useState<'credit' | 'debit'>('credit');\n  const [goldWeight, setGoldWeight] = useState('');\n  const [goldPurity, setGoldPurity] = useState('');\n  const [goldDescription, setGoldDescription] = useState('');\n  const [goldPurchasePrice, setGoldPurchasePrice] = useState('');\n  const [newUser, setNewUser] = useState({\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    role: 'user'\n  });\n\n  // Fetch all users\n  const { data: users = [], isLoading: usersLoading } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/users\", userData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Created\",\n        description: \"New user has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setIsCreateDialogOpen(false);\n      setNewUser({ email: '', password: '', firstName: '', lastName: '', role: 'user' });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Create User\",\n        description: error.message || \"An error occurred while creating the user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/users/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Updated\",\n        description: \"User has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setEditingUser(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Update User\",\n        description: error.message || \"An error occurred while updating the user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"DELETE\", `/api/admin/users/${userId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Deleted\",\n        description: \"User has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Delete User\",\n        description: error.message || \"An error occurred while deleting the user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Credit/debit account mutation\n  const accountTransactionMutation = useMutation({\n    mutationFn: async ({ userId, type, amount, description }: { userId: string; type: 'credit' | 'debit'; amount: number; description: string }) => {\n      const response = await apiRequest(\"POST\", `/api/admin/users/${userId}/${type}`, { amount, description });\n      return response.json();\n    },\n    onSuccess: (_, { type }) => {\n      toast({\n        title: \"Transaction Successful\",\n        description: `Account ${type} completed successfully.`,\n      });\n      setCreditDebitDialogOpen(false);\n      setTransactionAmount('');\n      setTransactionDescription('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Transaction Failed\",\n        description: error.message || \"An error occurred during the transaction.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Gold credit/debit mutation\n  const goldTransactionMutation = useMutation({\n    mutationFn: async ({ userId, type, weight, purity, description, purchasePrice }: { \n      userId: string; \n      type: 'credit' | 'debit'; \n      weight: number; \n      purity: number; \n      description: string; \n      purchasePrice?: number \n    }) => {\n      const response = await apiRequest(\"POST\", `/api/admin/users/${userId}/${type}-gold`, { \n        weight, \n        purity, \n        description, \n        purchasePrice \n      });\n      return response.json();\n    },\n    onSuccess: (_, { type }) => {\n      toast({\n        title: \"Gold Transaction Successful\",\n        description: `Gold ${type} completed successfully.`,\n      });\n      setGoldDialogOpen(false);\n      setGoldWeight('');\n      setGoldPurity('');\n      setGoldDescription('');\n      setGoldPurchasePrice('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Gold Transaction Failed\",\n        description: error.message || \"An error occurred during the gold transaction.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateUser = () => {\n    if (!newUser.email || !newUser.password || !newUser.firstName || !newUser.lastName) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createUserMutation.mutate(newUser);\n  };\n\n  const handleUpdateUser = (user: any) => {\n    updateUserMutation.mutate({ id: user.id, data: user });\n  };\n\n  const handleDeleteUser = (userId: string) => {\n    if (confirm(\"Are you sure you want to delete this user? This action cannot be undone.\")) {\n      deleteUserMutation.mutate(userId);\n    }\n  };\n\n  const handleCreditDebit = () => {\n    const amount = parseFloat(transactionAmount);\n    if (!amount || amount <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid amount greater than 0.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    accountTransactionMutation.mutate({\n      userId: selectedUserId,\n      type: transactionType,\n      amount,\n      description: transactionDescription || `Account ${transactionType} by admin`\n    });\n  };\n\n  const handleGoldCreditDebit = () => {\n    const weight = parseFloat(goldWeight);\n    const purity = parseFloat(goldPurity);\n    const purchasePrice = goldPurchasePrice ? parseFloat(goldPurchasePrice) : undefined;\n    \n    if (!weight || weight <= 0) {\n      toast({\n        title: \"Invalid Weight\",\n        description: \"Please enter a valid weight greater than 0.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!purity || purity <= 0 || purity > 100) {\n      toast({\n        title: \"Invalid Purity\",\n        description: \"Please enter a valid purity between 0 and 100%.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    goldTransactionMutation.mutate({\n      userId: selectedUserId,\n      type: goldTransactionType,\n      weight,\n      purity,\n      description: goldDescription || `Gold ${goldTransactionType} by admin`,\n      purchasePrice\n    });\n  };\n\n  if (usersLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading users...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center\">\n              <User className=\"h-5 w-5 mr-2\" />\n              User Management ({users.length} users)\n            </CardTitle>\n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-user\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add New User\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New User</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4 pt-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium\">First Name *</label>\n                      <Input\n                        type=\"text\"\n                        placeholder=\"John\"\n                        value={newUser.firstName}\n                        onChange={(e) => setNewUser({ ...newUser, firstName: e.target.value })}\n                        data-testid=\"input-first-name\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Last Name *</label>\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Doe\"\n                        value={newUser.lastName}\n                        onChange={(e) => setNewUser({ ...newUser, lastName: e.target.value })}\n                        data-testid=\"input-last-name\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Email Address *</label>\n                    <Input\n                      type=\"email\"\n                      placeholder=\"john@example.com\"\n                      value={newUser.email}\n                      onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Password *</label>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"Enter password\"\n                      value={newUser.password}\n                      onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}\n                      data-testid=\"input-password\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Role</label>\n                    <Select value={newUser.role} onValueChange={(value) => setNewUser({ ...newUser, role: value })}>\n                      <SelectTrigger data-testid=\"select-role\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"user\">Customer</SelectItem>\n                        <SelectItem value=\"admin\">Administrator</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setIsCreateDialogOpen(false)}\n                      data-testid=\"button-cancel\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      onClick={handleCreateUser}\n                      disabled={createUserMutation.isPending}\n                      data-testid=\"button-create\"\n                    >\n                      {createUserMutation.isPending ? (\n                        <>\n                          <div className=\"w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin mr-2\"></div>\n                          Creating...\n                        </>\n                      ) : (\n                        <>\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Create User\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {users.map((user: any) => (\n              <Card key={user.id} className=\"p-4\" data-testid={`user-${user.id}`}>\n                {editingUser?.id === user.id ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium\">First Name</label>\n                        <Input\n                          value={editingUser.firstName || ''}\n                          onChange={(e) => setEditingUser({ ...editingUser, firstName: e.target.value })}\n                          data-testid={`edit-first-name-${user.id}`}\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Last Name</label>\n                        <Input\n                          value={editingUser.lastName || ''}\n                          onChange={(e) => setEditingUser({ ...editingUser, lastName: e.target.value })}\n                          data-testid={`edit-last-name-${user.id}`}\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Email</label>\n                        <Input\n                          value={editingUser.email || ''}\n                          onChange={(e) => setEditingUser({ ...editingUser, email: e.target.value })}\n                          data-testid={`edit-email-${user.id}`}\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Role</label>\n                        <Select \n                          value={editingUser.role || 'user'} \n                          onValueChange={(value) => setEditingUser({ ...editingUser, role: value })}\n                        >\n                          <SelectTrigger data-testid={`edit-role-${user.id}`}>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"user\">Customer</SelectItem>\n                            <SelectItem value=\"admin\">Administrator</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setEditingUser(null)}\n                        data-testid={`button-cancel-edit-${user.id}`}\n                      >\n                        <X className=\"h-4 w-4 mr-2\" />\n                        Cancel\n                      </Button>\n                      <Button\n                        onClick={() => handleUpdateUser(editingUser)}\n                        disabled={updateUserMutation.isPending}\n                        data-testid={`button-save-${user.id}`}\n                      >\n                        {updateUserMutation.isPending ? (\n                          <>\n                            <div className=\"w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin mr-2\"></div>\n                            Saving...\n                          </>\n                        ) : (\n                          <>\n                            <Save className=\"h-4 w-4 mr-2\" />\n                            Save Changes\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n                        <User className=\"h-6 w-6 text-primary-foreground\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold\">{user.firstName} {user.lastName}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                        <div className=\"flex items-center mt-1\">\n                          <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                            {user.role === 'admin' ? 'Administrator' : 'Customer'}\n                          </Badge>\n                          <span className=\"text-xs text-muted-foreground ml-2\">\n                            Joined {new Date(user.createdAt).toLocaleDateString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setEditingUser({ ...user })}\n                        data-testid={`button-edit-${user.id}`}\n                      >\n                        <Edit className=\"h-4 w-4 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedUserId(user.id);\n                          setTransactionType('credit');\n                          setCreditDebitDialogOpen(true);\n                        }}\n                        data-testid={`button-credit-${user.id}`}\n                      >\n                        <Plus className=\"h-4 w-4 mr-1\" />\n                        Credit\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedUserId(user.id);\n                          setTransactionType('debit');\n                          setCreditDebitDialogOpen(true);\n                        }}\n                        data-testid={`button-debit-${user.id}`}\n                      >\n                        <Coins className=\"h-4 w-4 mr-1\" />\n                        Debit\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedUserId(user.id);\n                          setGoldTransactionType('credit');\n                          setGoldDialogOpen(true);\n                        }}\n                        data-testid={`button-gold-credit-${user.id}`}\n                      >\n                        <Shield className=\"h-4 w-4 mr-1\" />\n                        Gold+\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDeleteUser(user.id)}\n                        disabled={deleteUserMutation.isPending}\n                        data-testid={`button-delete-${user.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-1\" />\n                        Delete\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </Card>\n            ))}\n            {users.length === 0 && (\n              <div className=\"text-center py-12\">\n                <User className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h4 className=\"text-lg font-semibold mb-2\">No Users Found</h4>\n                <p className=\"text-muted-foreground\">Start by creating your first user.</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Credit/Debit Dialog */}\n      <Dialog open={creditDebitDialogOpen} onOpenChange={setCreditDebitDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {transactionType === 'credit' ? 'Credit Account' : 'Debit Account'}\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 pt-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Amount ($)</label>\n              <Input\n                type=\"number\"\n                placeholder=\"0.00\"\n                value={transactionAmount}\n                onChange={(e) => setTransactionAmount(e.target.value)}\n                data-testid=\"input-transaction-amount\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Description</label>\n              <Textarea\n                placeholder=\"Enter transaction description...\"\n                value={transactionDescription}\n                onChange={(e) => setTransactionDescription(e.target.value)}\n                data-testid=\"textarea-transaction-description\"\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setCreditDebitDialogOpen(false)}\n                data-testid=\"button-cancel-transaction\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleCreditDebit}\n                disabled={accountTransactionMutation.isPending}\n                data-testid=\"button-confirm-transaction\"\n              >\n                {accountTransactionMutation.isPending ? (\n                  <>\n                    <div className=\"w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin mr-2\"></div>\n                    Processing...\n                  </>\n                ) : (\n                  <>\n                    {transactionType === 'credit' ? <Plus className=\"h-4 w-4 mr-2\" /> : <Coins className=\"h-4 w-4 mr-2\" />}\n                    {transactionType === 'credit' ? 'Credit Account' : 'Debit Account'}\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Gold Credit/Debit Dialog */}\n      <Dialog open={goldDialogOpen} onOpenChange={setGoldDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {goldTransactionType === 'credit' ? 'Credit Gold Holdings' : 'Debit Gold Holdings'}\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 pt-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Weight (oz) *</label>\n                <Input\n                  type=\"number\"\n                  step=\"0.0001\"\n                  placeholder=\"0.0000\"\n                  value={goldWeight}\n                  onChange={(e) => setGoldWeight(e.target.value)}\n                  data-testid=\"input-gold-weight\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Purity (%) *</label>\n                <Input\n                  type=\"number\"\n                  step=\"0.001\"\n                  placeholder=\"99.9\"\n                  value={goldPurity}\n                  onChange={(e) => setGoldPurity(e.target.value)}\n                  data-testid=\"input-gold-purity\"\n                />\n              </div>\n            </div>\n            {goldTransactionType === 'credit' && (\n              <div>\n                <label className=\"text-sm font-medium\">Purchase Price ($)</label>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"0.00\"\n                  value={goldPurchasePrice}\n                  onChange={(e) => setGoldPurchasePrice(e.target.value)}\n                  data-testid=\"input-gold-purchase-price\"\n                />\n              </div>\n            )}\n            <div>\n              <label className=\"text-sm font-medium\">Description</label>\n              <Textarea\n                placeholder=\"Enter transaction description...\"\n                value={goldDescription}\n                onChange={(e) => setGoldDescription(e.target.value)}\n                data-testid=\"textarea-gold-description\"\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setGoldDialogOpen(false)}\n                data-testid=\"button-cancel-gold-transaction\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleGoldCreditDebit}\n                disabled={goldTransactionMutation.isPending}\n                data-testid=\"button-confirm-gold-transaction\"\n              >\n                {goldTransactionMutation.isPending ? (\n                  <>\n                    <div className=\"w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin mr-2\"></div>\n                    Processing...\n                  </>\n                ) : (\n                  <>\n                    {goldTransactionType === 'credit' ? <Shield className=\"h-4 w-4 mr-2\" /> : <Coins className=\"h-4 w-4 mr-2\" />}\n                    {goldTransactionType === 'credit' ? 'Credit Gold' : 'Debit Gold'}\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default function Admin() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [selectedClaim, setSelectedClaim] = useState<any>(null);\n  const [claimNotes, setClaimNotes] = useState(\"\");\n\n  // Auth protection\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || user?.role !== \"admin\")) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required. Redirecting to login...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/auth\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  // Admin data queries\n  const { data: pendingClaims = [], isLoading: claimsLoading } = useQuery({\n    queryKey: [\"/api/admin/pending-claims\"],\n    enabled: !!user,\n  });\n\n  const { data: consignments = [] } = useQuery({\n    queryKey: [\"/api/consignments\"],\n    enabled: !!user,\n  });\n\n  const { data: goldPrices } = useQuery({\n    queryKey: [\"/api/gold-prices\"],\n  });\n\n  // Mutations\n  const updateClaimMutation = useMutation({\n    mutationFn: async ({ id, status, adminNotes }: { id: string; status: string; adminNotes?: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/claims/${id}/status`, { status, adminNotes });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Claim Updated\",\n        description: \"Claim status has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pending-claims\"] });\n      setSelectedClaim(null);\n      setClaimNotes(\"\");\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Failed to Update Claim\",\n        description: error.message || \"An error occurred while updating the claim.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClaimAction = (status: string) => {\n    if (!selectedClaim) return;\n    \n    updateClaimMutation.mutate({\n      id: selectedClaim.id,\n      status,\n      adminNotes: claimNotes,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading admin dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  // Calculate stats\n  const totalConsignments = consignments.length;\n  const totalGoldWeight = consignments.reduce((sum: number, c: any) => sum + parseFloat(c.weight || 0), 0);\n  const totalPortfolioValue = consignments.reduce((sum: number, c: any) => sum + parseFloat(c.estimatedValue || 0), 0);\n  const pendingClaimsCount = pendingClaims.length;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <AdminNavigation\n        goldPrice={goldPrices?.usd || 2034.50}\n        user={user}\n      />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\" data-testid=\"admin-page\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-serif font-bold mb-4\">Admin Management Center</h1>\n          <p className=\"text-xl text-muted-foreground\">\n            Comprehensive administration tools for managing consignments, claims, and customer support\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-8\" data-testid=\"admin-tabs\">\n          <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-6 gap-2 h-auto p-2 bg-muted\">\n            <TabsTrigger \n              value=\"overview\" \n              data-testid=\"tab-overview\"\n              className=\"flex flex-col items-center justify-center p-4 text-xs md:text-sm min-h-[60px] md:min-h-[40px] data-[state=active]:bg-background data-[state=active]:text-foreground\"\n            >\n              <BarChart3 className=\"h-5 w-5 mb-1 md:hidden\" />\n              <span className=\"font-medium\">Overview</span>\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"consignments\" \n              data-testid=\"tab-consignments\"\n              className=\"flex flex-col items-center justify-center p-4 text-xs md:text-sm min-h-[60px] md:min-h-[40px] data-[state=active]:bg-background data-[state=active]:text-foreground\"\n            >\n              <Package className=\"h-5 w-5 mb-1 md:hidden\" />\n              <span className=\"font-medium\">Consignments</span>\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"claims\" \n              data-testid=\"tab-claims\"\n              className=\"flex flex-col items-center justify-center p-4 text-xs md:text-sm min-h-[60px] md:min-h-[40px] data-[state=active]:bg-background data-[state=active]:text-foreground\"\n            >\n              <Gavel className=\"h-5 w-5 mb-1 md:hidden\" />\n              <span className=\"font-medium\">Claims</span>\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"users\" \n              data-testid=\"tab-users\"\n              className=\"flex flex-col items-center justify-center p-4 text-xs md:text-sm min-h-[60px] md:min-h-[40px] data-[state=active]:bg-background data-[state=active]:text-foreground\"\n            >\n              <User className=\"h-5 w-5 mb-1 md:hidden\" />\n              <span className=\"font-medium\">Users</span>\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"support\" \n              data-testid=\"tab-support\"\n              className=\"flex flex-col items-center justify-center p-4 text-xs md:text-sm min-h-[60px] md:min-h-[40px] data-[state=active]:bg-background data-[state=active]:text-foreground\"\n            >\n              <MessageSquare className=\"h-5 w-5 mb-1 md:hidden\" />\n              <span className=\"font-medium\">Support</span>\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"analytics\" \n              data-testid=\"tab-analytics\"\n              className=\"flex flex-col items-center justify-center p-4 text-xs md:text-sm min-h-[60px] md:min-h-[40px] data-[state=active]:bg-background data-[state=active]:text-foreground\"\n            >\n              <TrendingUp className=\"h-5 w-5 mb-1 md:hidden\" />\n              <span className=\"font-medium\">Analytics</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\" data-testid=\"overview-content\">\n            {/* Stats Grid */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6\">\n              <Card data-testid=\"stat-active-consignments\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Active Consignments</p>\n                      <p className=\"text-2xl font-bold\">{totalConsignments.toLocaleString()}</p>\n                    </div>\n                    <Package className=\"h-8 w-8 text-primary\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"stat-pending-claims\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Pending Claims</p>\n                      <p className=\"text-2xl font-bold\">{pendingClaimsCount}</p>\n                    </div>\n                    <Gavel className=\"h-8 w-8 text-primary\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"stat-total-gold\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Total Gold (oz)</p>\n                      <p className=\"text-2xl font-bold\">{totalGoldWeight.toFixed(1)}</p>\n                    </div>\n                    <Coins className=\"h-8 w-8 text-primary\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"stat-portfolio-value\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Portfolio Value</p>\n                      <p className=\"text-2xl font-bold\">\n                        ${(totalPortfolioValue / 1000000).toFixed(1)}M\n                      </p>\n                    </div>\n                    <TrendingUp className=\"h-8 w-8 text-primary\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Activities */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-8\">\n              <Card data-testid=\"recent-consignments\">\n                <CardHeader>\n                  <CardTitle>Recent Consignments</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {consignments.slice(0, 5).length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {consignments.slice(0, 5).map((consignment: any, index: number) => (\n                        <div key={consignment.id} className=\"flex items-center justify-between p-4 bg-muted rounded-lg\" data-testid={`recent-consignment-${index}`}>\n                          <div className=\"flex items-center\">\n                            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center mr-3\">\n                              <Plus className=\"h-5 w-5 text-primary-foreground\" />\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">#{consignment.consignmentNumber}</p>\n                              <p className=\"text-sm text-muted-foreground\">{consignment.weight} oz</p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-semibold\">${parseFloat(consignment.estimatedValue).toLocaleString()}</p>\n                            <Badge variant={consignment.status === 'stored' ? 'default' : 'secondary'}>\n                              {consignment.status}\n                            </Badge>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Package className=\"h-12 w-12 text-muted-foreground mx-auto mb-2\" />\n                      <p className=\"text-muted-foreground\">No recent consignments</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"pending-actions\">\n                <CardHeader>\n                  <CardTitle>Pending Actions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {pendingClaims.length > 0 ? (\n                      pendingClaims.slice(0, 3).map((claim: any, index: number) => (\n                        <div key={claim.id} className=\"flex items-center justify-between p-4 bg-yellow-50 border border-yellow-200 rounded-lg\" data-testid={`pending-action-${index}`}>\n                          <div className=\"flex items-center\">\n                            <Gavel className=\"h-5 w-5 text-yellow-600 mr-3\" />\n                            <div>\n                              <p className=\"font-medium\">Inheritance Claim</p>\n                              <p className=\"text-sm text-muted-foreground\">From: {claim.claimantName}</p>\n                            </div>\n                          </div>\n                          <Button \n                            size=\"sm\"\n                            onClick={() => setSelectedClaim(claim)}\n                            data-testid={`button-review-claim-${index}`}\n                          >\n                            Review\n                          </Button>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-2\" />\n                        <p className=\"text-muted-foreground\">No pending actions</p>\n                      </div>\n                    )}\n\n                    {/* Sample KYC Review Action */}\n                    <div className=\"flex items-center justify-between p-4 bg-blue-50 border border-blue-200 rounded-lg\" data-testid=\"pending-action-kyc\">\n                      <div className=\"flex items-center\">\n                        <User className=\"h-5 w-5 text-blue-600 mr-3\" />\n                        <div>\n                          <p className=\"font-medium\">KYC Review Required</p>\n                          <p className=\"text-sm text-muted-foreground\">Multiple customer documents</p>\n                        </div>\n                      </div>\n                      <Button size=\"sm\" variant=\"outline\" data-testid=\"button-review-kyc\">\n                        Review KYC\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Consignments Tab */}\n          <TabsContent value=\"consignments\" className=\"space-y-6\" data-testid=\"consignments-content\">\n            <Card>\n              <CardHeader>\n                <CardTitle>All Consignments</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {consignments.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {consignments.map((consignment: any) => (\n                      <Card key={consignment.id} className=\"p-4\" data-testid={`admin-consignment-${consignment.id}`}>\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-semibold\">#{consignment.consignmentNumber}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{consignment.description}</p>\n                            <div className=\"flex items-center gap-4 mt-2 text-sm\">\n                              <span>Weight: {consignment.weight} oz</span>\n                              <span>Value: ${parseFloat(consignment.estimatedValue).toLocaleString()}</span>\n                              <span>Plan: {consignment.storagePlan}</span>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge variant={consignment.status === 'stored' ? 'default' : 'secondary'} className=\"mb-2\">\n                              {consignment.status}\n                            </Badge>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {new Date(consignment.createdAt).toLocaleDateString()}\n                            </div>\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Package className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                    <h4 className=\"text-lg font-semibold mb-2\">No consignments found</h4>\n                    <p className=\"text-muted-foreground\">\n                      Consignments will appear here as customers create them.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Claims Tab */}\n          <TabsContent value=\"claims\" className=\"space-y-6\" data-testid=\"claims-content\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Claims List */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Pending Inheritance Claims</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {claimsLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-2\"></div>\n                      <p className=\"text-muted-foreground\">Loading claims...</p>\n                    </div>\n                  ) : pendingClaims.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {pendingClaims.map((claim: any) => (\n                        <Card \n                          key={claim.id} \n                          className={`p-4 cursor-pointer transition-colors ${selectedClaim?.id === claim.id ? 'bg-primary/5 border-primary' : 'hover:bg-muted'}`}\n                          onClick={() => setSelectedClaim(claim)}\n                          data-testid={`claim-${claim.id}`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <h4 className=\"font-semibold\">{claim.claimantName}</h4>\n                              <p className=\"text-sm text-muted-foreground\">{claim.claimantEmail}</p>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                                <span className=\"text-sm text-muted-foreground\">\n                                  {new Date(claim.createdAt).toLocaleDateString()}\n                                </span>\n                              </div>\n                            </div>\n                            <Badge variant=\"secondary\">\n                              {claim.status}\n                            </Badge>\n                          </div>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Gavel className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                      <h4 className=\"text-lg font-semibold mb-2\">No pending claims</h4>\n                      <p className=\"text-muted-foreground\">\n                        Inheritance claims will appear here for review.\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Claim Details */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Claim Review</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {selectedClaim ? (\n                    <div className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Claimant Information</h4>\n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-muted-foreground\">Name:</span>\n                            <span>{selectedClaim.claimantName}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-muted-foreground\">Email:</span>\n                            <span>{selectedClaim.claimantEmail}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-muted-foreground\">Submitted:</span>\n                            <span>{new Date(selectedClaim.createdAt).toLocaleDateString()}</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      {selectedClaim.documentUrls?.length > 0 && (\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Documents</h4>\n                          <div className=\"space-y-2\">\n                            {selectedClaim.documentUrls.map((url: string, index: number) => (\n                              <div key={index} className=\"flex items-center gap-2 p-2 bg-muted rounded\">\n                                <FileText className=\"h-4 w-4\" />\n                                <span className=\"text-sm\">Document {index + 1}</span>\n                                <Button variant=\"ghost\" size=\"sm\" className=\"ml-auto\" data-testid={`button-view-doc-${index}`}>\n                                  View\n                                </Button>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      <div>\n                        <Label htmlFor=\"adminNotes\">Admin Notes</Label>\n                        <Textarea\n                          id=\"adminNotes\"\n                          value={claimNotes}\n                          onChange={(e) => setClaimNotes(e.target.value)}\n                          placeholder=\"Add notes about this claim review...\"\n                          rows={4}\n                          data-testid=\"textarea-admin-notes\"\n                        />\n                      </div>\n\n                      <div className=\"flex gap-2\">\n                        <Button \n                          onClick={() => handleClaimAction('approved')}\n                          disabled={updateClaimMutation.isPending}\n                          className=\"flex-1\"\n                          data-testid=\"button-approve-claim\"\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-2\" />\n                          Approve\n                        </Button>\n                        <Button \n                          variant=\"destructive\"\n                          onClick={() => handleClaimAction('rejected')}\n                          disabled={updateClaimMutation.isPending}\n                          className=\"flex-1\"\n                          data-testid=\"button-reject-claim\"\n                        >\n                          <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                          Reject\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Gavel className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                      <h4 className=\"text-lg font-semibold mb-2\">Select a Claim</h4>\n                      <p className=\"text-muted-foreground\">\n                        Choose a claim from the list to review details and take action.\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\" className=\"space-y-6\" data-testid=\"users-content\">\n            <UserManagement />\n          </TabsContent>\n\n          {/* Support Tab */}\n          <TabsContent value=\"support\" className=\"space-y-6\" data-testid=\"support-content\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Customer Support</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-12\">\n                  <MessageSquare className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                  <h4 className=\"text-lg font-semibold mb-2\">Support Dashboard</h4>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Live chat support features will be implemented here.\n                  </p>\n                  <Button variant=\"outline\" data-testid=\"button-manage-support\">\n                    Manage Support Tickets\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\" data-testid=\"analytics-content\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Platform Analytics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-12\">\n                  <BarChart3 className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                  <h4 className=\"text-lg font-semibold mb-2\">Analytics Dashboard</h4>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Comprehensive analytics and reporting features will be implemented here.\n                  </p>\n                  <Button variant=\"outline\" data-testid=\"button-view-analytics\">\n                    View Full Analytics\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Claim Modal/Dialog would go here in a real implementation */}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":53103},"client/src/pages/consignment.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navigation from \"@/components/Navigation\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Upload, FileText, Shield, CheckCircle, ArrowLeft } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Consignment() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const [formData, setFormData] = useState({\n    description: \"\",\n    weight: \"\",\n    purity: \"\",\n    estimatedValue: \"\",\n    storagePlan: \"standard\",\n    insuranceEnabled: true,\n  });\n\n  const [files, setFiles] = useState<FileList | null>(null);\n\n  const createConsignmentMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await apiRequest(\"POST\", \"/api/consignments\", data);\n      return response.json();\n    },\n    onSuccess: (consignment) => {\n      toast({\n        title: \"Consignment Created Successfully\",\n        description: `Your consignment #${consignment.consignmentNumber} has been created and is pending verification.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/consignments\"] });\n      setLocation(\"/dashboard\");\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Failed to Create Consignment\",\n        description: error.message || \"An error occurred while creating your consignment.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.description || !formData.weight || !formData.purity || !formData.estimatedValue) {\n      toast({\n        title: \"Missing Required Fields\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const submitData = new FormData();\n    submitData.append(\"description\", formData.description);\n    submitData.append(\"weight\", formData.weight);\n    submitData.append(\"purity\", formData.purity);\n    submitData.append(\"estimatedValue\", formData.estimatedValue);\n    submitData.append(\"storagePlan\", formData.storagePlan);\n    submitData.append(\"insuranceEnabled\", formData.insuranceEnabled.toString());\n\n    if (files) {\n      Array.from(files).forEach((file) => {\n        submitData.append(\"documents\", file);\n      });\n    }\n\n    createConsignmentMutation.mutate(submitData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will be redirected by auth flow\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-24 md:pb-0\">\n      {/* Desktop Navigation */}\n      <div className=\"hidden md:block\">\n        <Navigation \n          goldPrice={2034.50}\n          onLogin={() => window.location.href = \"/api/login\"}\n          onRegister={() => window.location.href = \"/api/login\"}\n          user={user}\n        />\n      </div>\n\n      <div className=\"max-w-4xl mx-auto px-3 sm:px-4 lg:px-8 py-3 md:py-8\" data-testid=\"consignment-page\">\n        {/* Header */}\n        <div className=\"mb-4 md:mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation(\"/dashboard\")}\n            className=\"mb-2 md:mb-4 hidden md:flex\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          {/* Mobile header - compact */}\n          <div className=\"md:hidden mb-4 pt-2\">\n            <h1 className=\"text-2xl font-serif font-bold mb-2\">New Consignment</h1>\n            <p className=\"text-sm text-muted-foreground\">\n              Create a secure gold consignment\n            </p>\n          </div>\n          {/* Desktop header - full */}\n          <div className=\"hidden md:block\">\n            <h1 className=\"text-4xl font-serif font-bold mb-4\">Create Gold Consignment</h1>\n            <p className=\"text-xl text-muted-foreground\">\n              Securely consign your gold assets with our professional storage service\n            </p>\n          </div>\n        </div>\n\n        <form onSubmit={handleSubmit} data-testid=\"consignment-form\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-8\">\n            {/* Main Form */}\n            <div className=\"lg:col-span-2 space-y-4 md:space-y-6\">\n              {/* Gold Details */}\n              <Card data-testid=\"card-gold-details\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <span className=\"text-2xl text-primary mr-2\">🪙</span>\n                    Gold Details\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"description\">Item Description *</Label>\n                    <Textarea\n                      id=\"description\"\n                      placeholder=\"e.g., 5 x 1oz Gold American Eagle Coins, 2024\"\n                      value={formData.description}\n                      onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                      className=\"mt-1\"\n                      required\n                      data-testid=\"input-description\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"weight\">Weight (oz) *</Label>\n                      <Input\n                        id=\"weight\"\n                        type=\"number\"\n                        step=\"0.0001\"\n                        placeholder=\"5.0000\"\n                        value={formData.weight}\n                        onChange={(e) => setFormData({ ...formData, weight: e.target.value })}\n                        className=\"mt-1\"\n                        required\n                        data-testid=\"input-weight\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"purity\">Purity (%) *</Label>\n                      <Input\n                        id=\"purity\"\n                        type=\"number\"\n                        step=\"0.001\"\n                        placeholder=\"99.9\"\n                        value={formData.purity}\n                        onChange={(e) => setFormData({ ...formData, purity: e.target.value })}\n                        className=\"mt-1\"\n                        required\n                        data-testid=\"input-purity\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"estimatedValue\">Estimated Value (USD) *</Label>\n                    <Input\n                      id=\"estimatedValue\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"10000.00\"\n                      value={formData.estimatedValue}\n                      onChange={(e) => setFormData({ ...formData, estimatedValue: e.target.value })}\n                      className=\"mt-1\"\n                      required\n                      data-testid=\"input-estimated-value\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Storage Options */}\n              <Card data-testid=\"card-storage-options\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Shield className=\"h-6 w-6 text-primary mr-2\" />\n                    Storage & Insurance Options\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label>Storage Plan</Label>\n                    <Select \n                      value={formData.storagePlan} \n                      onValueChange={(value) => setFormData({ ...formData, storagePlan: value })}\n                    >\n                      <SelectTrigger className=\"mt-1\" data-testid=\"select-storage-plan\">\n                        <SelectValue placeholder=\"Select storage plan\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"standard\">Standard (0.5% annually)</SelectItem>\n                        <SelectItem value=\"premium\">Premium (0.8% annually)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"insurance\"\n                      checked={formData.insuranceEnabled}\n                      onCheckedChange={(checked) => setFormData({ ...formData, insuranceEnabled: !!checked })}\n                      data-testid=\"checkbox-insurance\"\n                    />\n                    <Label htmlFor=\"insurance\" className=\"text-sm\">\n                      Enable full value insurance (+0.1% annually)\n                    </Label>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Document Upload */}\n              <Card data-testid=\"card-document-upload\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <FileText className=\"h-6 w-6 text-primary mr-2\" />\n                    Documentation\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div>\n                    <Label htmlFor=\"documents\">Upload Photos & Certificates (Optional)</Label>\n                    <div className=\"mt-2 border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                      <Upload className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                      <p className=\"text-sm text-muted-foreground mb-2\">\n                        Drag and drop files here, or click to browse\n                      </p>\n                      <Input\n                        id=\"documents\"\n                        type=\"file\"\n                        multiple\n                        accept=\".jpg,.jpeg,.png,.pdf\"\n                        onChange={(e) => setFiles(e.target.files)}\n                        className=\"hidden\"\n                        data-testid=\"input-documents\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => document.getElementById('documents')?.click()}\n                        data-testid=\"button-browse-files\"\n                      >\n                        Choose Files\n                      </Button>\n                    </div>\n                    {files && files.length > 0 && (\n                      <div className=\"mt-2 text-sm text-muted-foreground\">\n                        {files.length} file(s) selected\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Summary Sidebar */}\n            <div className=\"space-y-4 md:space-y-6\">\n              {/* Cost Summary */}\n              <Card data-testid=\"card-cost-summary\">\n                <CardHeader>\n                  <CardTitle>Cost Summary</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span>Storage Fee (Annual)</span>\n                    <span data-testid=\"text-storage-fee\">\n                      ${formData.estimatedValue ? (parseFloat(formData.estimatedValue) * 0.005).toFixed(2) : \"0.00\"}\n                    </span>\n                  </div>\n                  \n                  {formData.insuranceEnabled && (\n                    <div className=\"flex justify-between\">\n                      <span>Insurance (Annual)</span>\n                      <span data-testid=\"text-insurance-fee\">\n                        ${formData.estimatedValue ? (parseFloat(formData.estimatedValue) * 0.001).toFixed(2) : \"0.00\"}\n                      </span>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex justify-between\">\n                    <span>Setup Fee</span>\n                    <span>$25.00</span>\n                  </div>\n                  \n                  <hr />\n                  \n                  <div className=\"flex justify-between text-lg font-bold\">\n                    <span>Total Annual Cost</span>\n                    <span className=\"text-primary\" data-testid=\"text-total-cost\">\n                      ${formData.estimatedValue ? (\n                        parseFloat(formData.estimatedValue) * 0.005 + \n                        (formData.insuranceEnabled ? parseFloat(formData.estimatedValue) * 0.001 : 0) + \n                        25\n                      ).toFixed(2) : \"25.00\"}\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Security Features */}\n              <Card data-testid=\"card-security-features\">\n                <CardHeader>\n                  <CardTitle>Security Features</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    <li className=\"flex items-center text-sm\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                      24/7 vault monitoring\n                    </li>\n                    <li className=\"flex items-center text-sm\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                      Individual allocation\n                    </li>\n                    <li className=\"flex items-center text-sm\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                      Digital certificates\n                    </li>\n                    <li className=\"flex items-center text-sm\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                      QR code tracking\n                    </li>\n                    <li className=\"flex items-center text-sm\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                      Full insurance coverage\n                    </li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              {/* Submit Button */}\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                size=\"lg\"\n                disabled={createConsignmentMutation.isPending}\n                data-testid=\"button-submit-consignment\"\n              >\n                {createConsignmentMutation.isPending ? (\n                  <>\n                    <div className=\"w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin mr-2\"></div>\n                    Creating Consignment...\n                  </>\n                ) : (\n                  <>\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    Create Secure Consignment\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </form>\n      </div>\n\n      {/* Desktop Footer */}\n      <div className=\"hidden md:block\">\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","size_bytes":16762},"client/src/pages/dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navigation from \"@/components/Navigation\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Coins, \n  FileText, \n  Download, \n  Plus, \n  Edit, \n  Trash2, \n  Save,\n  Shield,\n  Award,\n  Calendar,\n  TrendingUp,\n  ExternalLink,\n  AlertCircle,\n  CheckCircle,\n  Wallet,\n  Package,\n  Home,\n  LogOut,\n  User\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Active tab state for mobile navigation\n  const [activeTab, setActiveTab] = useState(\"portfolio\");\n\n  // Will Builder State\n  const [willData, setWillData] = useState({\n    primaryBeneficiary: \"\",\n    relationship: \"\",\n    allocation: 50,\n    instructions: \"\",\n  });\n\n  // Auth protection\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Data queries\n  const { data: consignments = [], isLoading: consignmentsLoading } = useQuery({\n    queryKey: [\"/api/consignments\"],\n    enabled: !!user,\n  });\n\n  const { data: digitalWill, isLoading: willLoading } = useQuery({\n    queryKey: [\"/api/digital-wills\"],\n    enabled: !!user,\n    retry: false,\n  });\n\n  const { data: goldPrices } = useQuery({\n    queryKey: [\"/api/gold-prices\"],\n  });\n\n  // Fetch user account balance\n  const { data: accountBalance = { balance: 0 } } = useQuery({\n    queryKey: [\"/api/account/balance\"],\n    enabled: !!user,\n  });\n\n  // Fetch user gold balance\n  const { data: goldBalance = { totalWeight: 0, totalValue: 0, avgPurity: 0, activeItems: 0 } } = useQuery({\n    queryKey: [\"/api/gold/balance\"],\n    enabled: !!user,\n  });\n\n  // Fetch user gold holdings\n  const { data: goldHoldings = [] } = useQuery({\n    queryKey: [\"/api/gold/holdings\"],\n    enabled: !!user,\n  });\n\n  // Mutations\n  const createWillMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/digital-wills\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Digital Will Created\",\n        description: \"Your digital will has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/digital-wills\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Failed to Create Will\",\n        description: error.message || \"An error occurred while creating your digital will.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addBeneficiaryMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/beneficiaries\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Beneficiary Added\",\n        description: \"Beneficiary has been added to your will.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/digital-wills\"] });\n      setWillData({\n        primaryBeneficiary: \"\",\n        relationship: \"\",\n        allocation: 50,\n        instructions: \"\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Failed to Add Beneficiary\",\n        description: error.message || \"An error occurred while adding the beneficiary.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteBeneficiaryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/beneficiaries/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Beneficiary Removed\",\n        description: \"Beneficiary has been removed from your will.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/digital-wills\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Failed to Remove Beneficiary\",\n        description: error.message || \"An error occurred while removing the beneficiary.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateWill = () => {\n    if (!digitalWill) {\n      createWillMutation.mutate({\n        status: \"draft\",\n        totalAllocation: 0,\n      });\n    }\n  };\n\n  const handleAddBeneficiary = () => {\n    if (!willData.primaryBeneficiary || !willData.relationship || !willData.allocation) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!digitalWill) {\n      toast({\n        title: \"Create Will First\",\n        description: \"Please create a digital will before adding beneficiaries.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addBeneficiaryMutation.mutate({\n      willId: digitalWill.id,\n      fullName: willData.primaryBeneficiary,\n      relationship: willData.relationship,\n      percentage: willData.allocation,\n      instructions: willData.instructions,\n    });\n  };\n\n  const handleDeleteBeneficiary = (id: string) => {\n    deleteBeneficiaryMutation.mutate(id);\n  };\n\n  const handleLogout = async () => {\n    try {\n      await fetch(\"/api/logout\", { method: \"POST\" });\n      window.location.href = \"/auth\";\n    } catch (error) {\n      window.location.href = \"/auth\";\n    }\n  };\n\n  if (isLoading || consignmentsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading your dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const currentGoldPrice = goldPrices?.usd || 2034.50;\n  const totalWeight = goldBalance.totalWeight || 0;\n  const totalValue = goldBalance.totalValue || 0;\n  const currentMarketValue = totalWeight * currentGoldPrice;\n  const profitLoss = currentMarketValue - totalValue;\n  const totalAllocation = digitalWill?.beneficiaries?.reduce((sum: number, b: any) => sum + b.percentage, 0) || 0;\n\n  // Mobile Bottom Navigation Component\n  const MobileBottomNav = () => (\n    <div className=\"fixed bottom-0 left-0 right-0 bg-background/95 backdrop-blur-sm border-t border-border z-50 md:hidden shadow-lg\">\n      <div className=\"grid grid-cols-5 px-1 py-3 safe-area-inset-bottom\">\n        {[\n          { id: 'portfolio', icon: Home, label: 'Portfolio', shortLabel: 'Home' },\n          { id: 'consignments', icon: Package, label: 'Consignments', shortLabel: 'Assets' },\n          { id: 'certificates', icon: FileText, label: 'Certificates', shortLabel: 'Docs' },\n          { id: 'inheritance', icon: Shield, label: 'Inheritance', shortLabel: 'Will' },\n          { id: 'tracking', icon: ExternalLink, label: 'Tracking', shortLabel: 'Track' }\n        ].map(({ id, icon: Icon, label, shortLabel }) => (\n          <button\n            key={id}\n            onClick={() => setActiveTab(id)}\n            className={`flex flex-col items-center justify-center py-2 px-1 min-h-[64px] transition-all duration-200 rounded-lg mx-1 ${\n              activeTab === id \n                ? 'text-primary bg-primary/10' \n                : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'\n            }`}\n            data-testid={`bottom-nav-${id}`}\n            aria-label={label}\n          >\n            <Icon className={`h-6 w-6 mb-1 ${activeTab === id ? 'scale-110' : ''} transition-transform`} />\n            <span className=\"text-[10px] font-medium leading-tight text-center max-w-[60px] truncate\">\n              {shortLabel}\n            </span>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n\n  // Mobile Top Navigation Component with Back Navigation\n  const MobileTopNav = () => {\n    const getPageTitle = () => {\n      switch (activeTab) {\n        case 'portfolio': return 'Portfolio';\n        case 'consignments': return 'My Assets';\n        case 'certificates': return 'Documents';\n        case 'inheritance': return 'Digital Will';\n        case 'tracking': return 'Tracking';\n        default: return 'Dashboard';\n      }\n    };\n\n    return (\n      <div className=\"bg-background/95 backdrop-blur-sm border-b border-border sticky top-0 z-40 md:hidden\">\n        <div className=\"flex items-center justify-between px-4 py-3 min-h-[56px]\">\n          <div className=\"flex items-center space-x-3\">\n            {activeTab !== 'portfolio' && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setActiveTab('portfolio')}\n                className=\"p-1 h-8 w-8\"\n                data-testid=\"mobile-back\"\n                aria-label=\"Go back to Portfolio\"\n              >\n                <ExternalLink className=\"h-4 w-4 rotate-180\" />\n              </Button>\n            )}\n            <div className=\"flex items-center\">\n              <Shield className=\"h-5 w-5 text-primary mr-2\" />\n              <div>\n                <span className=\"text-base font-serif font-bold text-primary\">GoldVault</span>\n                <p className=\"text-xs text-muted-foreground leading-none\">{getPageTitle()}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-xs font-medium text-muted-foreground truncate max-w-[80px]\">\n              {user?.firstName || user?.email?.split('@')[0] || 'User'}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleLogout}\n              className=\"p-1.5 h-8 w-8\"\n              data-testid=\"mobile-logout\"\n              aria-label=\"Logout\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background pb-24 md:pb-0\">\n      {/* Desktop Navigation */}\n      <div className=\"hidden md:block\">\n        <Navigation \n          goldPrice={currentGoldPrice}\n          onLogin={() => window.location.href = \"/api/login\"}\n          onRegister={() => window.location.href = \"/api/login\"}\n          user={user}\n        />\n      </div>\n\n      {/* Mobile Top Navigation */}\n      <MobileTopNav />\n\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 py-3 md:py-8\" data-testid=\"dashboard-page\">\n        {/* Header - Desktop Only */}\n        <div className=\"mb-4 md:mb-8 hidden md:block\">\n          <h1 className=\"text-4xl font-serif font-bold mb-4\">Portfolio Dashboard</h1>\n          <p className=\"text-xl text-muted-foreground\">\n            Manage your gold investments, certificates, and inheritance planning\n          </p>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4 md:space-y-8\" data-testid=\"dashboard-tabs\">\n          {/* Desktop Tabs - Hidden on Mobile */}\n          <TabsList className=\"hidden md:grid w-full grid-cols-5 gap-2 h-auto p-2 bg-muted\">\n            <TabsTrigger \n              value=\"portfolio\" \n              data-testid=\"tab-portfolio\"\n              className=\"flex flex-col items-center justify-center p-4 text-sm min-h-[40px] data-[state=active]:bg-background data-[state=active]:text-foreground\"\n            >\n              <span className=\"font-medium\">Portfolio</span>\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"consignments\" \n              data-testid=\"tab-consignments\"\n              className=\"flex flex-col items-center justify-center p-4 text-sm min-h-[40px] data-[state=active]:bg-background data-[state=active]:text-foreground\"\n            >\n              <span className=\"font-medium\">Consignments</span>\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"certificates\" \n              data-testid=\"tab-certificates\"\n              className=\"flex flex-col items-center justify-center p-4 text-sm min-h-[40px] data-[state=active]:bg-background data-[state=active]:text-foreground\"\n            >\n              <span className=\"font-medium\">Certificates</span>\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"inheritance\" \n              data-testid=\"tab-inheritance\"\n              className=\"flex flex-col items-center justify-center p-4 text-sm min-h-[40px] data-[state=active]:bg-background data-[state=active]:text-foreground\"\n            >\n              <span className=\"font-medium\">Inheritance</span>\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"tracking\" \n              data-testid=\"tab-tracking\"\n              className=\"flex flex-col items-center justify-center p-4 text-sm min-h-[40px] data-[state=active]:bg-background data-[state=active]:text-foreground\"\n            >\n              <span className=\"font-medium\">Tracking</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Portfolio Tab */}\n          <TabsContent value=\"portfolio\" className=\"space-y-4 md:space-y-6\" data-testid=\"portfolio-content\">\n            {/* Account Balance - Top Priority for Mobile */}\n            <Card data-testid=\"account-balance\" className=\"bg-gradient-to-r from-primary/5 to-primary/10 border-primary/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center text-lg\">\n                  <Wallet className=\"h-5 w-5 mr-2 text-primary\" />\n                  Account Balance\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"text-center py-2\">\n                  <p className=\"text-3xl font-bold text-primary\">\n                    ${accountBalance.balance ? accountBalance.balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) : '0.00'}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">Available funds</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Portfolio Summary Section - 2 Column Grid on Mobile */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                <TrendingUp className=\"h-5 w-5 mr-2 text-primary\" />\n                Portfolio Summary\n              </h3>\n              <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 md:gap-4\">\n              <Card data-testid=\"stat-total-value\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Portfolio Value</p>\n                      <p className=\"text-3xl font-bold text-primary\">\n                        ${currentMarketValue.toLocaleString('en-US', { maximumFractionDigits: 0 })}\n                      </p>\n                      <p className={`text-xs mt-1 ${profitLoss >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {profitLoss >= 0 ? '+' : ''}${profitLoss.toLocaleString('en-US', { maximumFractionDigits: 0 })} profit\n                      </p>\n                    </div>\n                    <TrendingUp className=\"h-8 w-8 text-primary\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"stat-total-weight\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Gold Holdings</p>\n                      <p className=\"text-3xl font-bold\">{totalWeight.toFixed(4)} oz</p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {goldBalance.avgPurity.toFixed(1)}% avg purity | {goldBalance.activeItems} items\n                      </p>\n                    </div>\n                    <Coins className=\"h-8 w-8 text-primary\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"stat-active-consignments\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Active Items</p>\n                      <p className=\"text-3xl font-bold\">{consignments.length}</p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Stored consignments\n                      </p>\n                    </div>\n                    <Shield className=\"h-8 w-8 text-primary\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"stat-average-purity\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Avg. Purity</p>\n                      <p className=\"text-3xl font-bold\">\n                        {consignments.length > 0 \n                          ? (consignments.reduce((sum: number, c: any) => sum + parseFloat(c.purity || 0), 0) / consignments.length).toFixed(1)\n                          : '0'}%\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Gold quality\n                      </p>\n                    </div>\n                    <Award className=\"h-8 w-8 text-primary\" />\n                  </div>\n                </CardContent>\n              </Card>\n              </div>\n            </div>\n\n            {/* Live Gold Prices - Compact Section */}\n            <Card data-testid=\"live-gold-prices\" className=\"border-muted\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center text-base\">\n                  <Coins className=\"h-4 w-4 mr-2 text-primary\" />\n                  Live Gold Prices (LBMA/COMEX)\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3\">\n                  <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">USD</p>\n                      <p className=\"text-lg font-bold\">${currentGoldPrice.toFixed(2)}</p>\n                      <p className={`text-xs ${goldPrices?.change24h?.usd >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {goldPrices?.change24h?.usd >= 0 ? '+' : ''}{goldPrices?.change24h?.usd?.toFixed(2)}%\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">GBP</p>\n                      <p className=\"text-lg font-bold\">£{goldPrices?.gbp?.toFixed(2) || '1,628.00'}</p>\n                      <p className={`text-xs ${goldPrices?.change24h?.gbp >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {goldPrices?.change24h?.gbp >= 0 ? '+' : ''}{goldPrices?.change24h?.gbp?.toFixed(2)}%\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">EUR</p>\n                      <p className=\"text-lg font-bold\">€{goldPrices?.eur?.toFixed(2) || '1,885.00'}</p>\n                      <p className={`text-xs ${goldPrices?.change24h?.eur >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {goldPrices?.change24h?.eur >= 0 ? '+' : ''}{goldPrices?.change24h?.eur?.toFixed(2)}%\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2 text-center\">\n                  Last updated: {goldPrices?.lastUpdated ? new Date(goldPrices.lastUpdated).toLocaleTimeString() : 'Now'}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Real-time Portfolio Performance */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6\">\n              <Card data-testid=\"performance-metrics\">\n                <CardHeader>\n                  <CardTitle>Portfolio Performance</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n                      <span className=\"text-sm font-medium\">Current Market Value</span>\n                      <span className=\"font-bold text-primary\">${currentMarketValue.toLocaleString('en-US', { maximumFractionDigits: 0 })}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n                      <span className=\"text-sm font-medium\">Original Investment</span>\n                      <span className=\"font-bold\">${totalValue.toLocaleString('en-US', { maximumFractionDigits: 0 })}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n                      <span className=\"text-sm font-medium\">Profit/Loss</span>\n                      <span className={`font-bold ${profitLoss >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {profitLoss >= 0 ? '+' : ''}${profitLoss.toLocaleString('en-US', { maximumFractionDigits: 0 })}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n                      <span className=\"text-sm font-medium\">Unrealized P&L</span>\n                      <span className={`font-bold ${(totalWeight * currentGoldPrice) - totalValue >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        ${Math.abs((totalWeight * currentGoldPrice) - totalValue).toLocaleString('en-US', { maximumFractionDigits: 0 })}\n                        {(totalWeight * currentGoldPrice) - totalValue >= 0 ? ' ↗' : ' ↘'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n                      <span className=\"text-sm font-medium\">Return (%)</span>\n                      <span className={`font-bold ${(totalWeight * currentGoldPrice) - totalValue >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {totalValue > 0 ? (((totalWeight * currentGoldPrice) - totalValue) / totalValue * 100).toFixed(2) : '0.00'}%\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"storage-breakdown\">\n                <CardHeader>\n                  <CardTitle>Storage Breakdown</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {consignments.length > 0 ? (\n                      consignments.map((consignment: any, index: number) => (\n                        <div key={consignment.id} className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n                          <div>\n                            <span className=\"text-sm font-medium\">#{consignment.consignmentNumber}</span>\n                            <p className=\"text-xs text-muted-foreground\">{consignment.purity}% purity</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <span className=\"font-bold\">{consignment.weight} oz</span>\n                            <p className=\"text-xs text-muted-foreground\">${(parseFloat(consignment.weight) * currentGoldPrice).toLocaleString()}</p>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <Coins className=\"h-12 w-12 text-muted-foreground mx-auto mb-2\" />\n                        <p className=\"text-muted-foreground\">No gold holdings yet</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Activity */}\n            <Card data-testid=\"recent-activity\">\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {consignments.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {consignments.slice(0, 5).map((consignment: any, index: number) => (\n                      <div key={consignment.id} className=\"flex items-center justify-between p-4 bg-muted rounded-lg\" data-testid={`activity-${index}`}>\n                        <div className=\"flex items-center\">\n                          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center mr-3\">\n                            <Plus className=\"h-5 w-5 text-primary-foreground\" />\n                          </div>\n                          <div>\n                            <div className=\"font-medium\">Consignment #{consignment.consignmentNumber}</div>\n                            <div className=\"text-sm text-muted-foreground\">{consignment.description}</div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-semibold\">+{consignment.weight} oz</div>\n                          <Badge variant={consignment.status === 'stored' ? 'default' : 'secondary'}>\n                            {consignment.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Coins className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                    <h4 className=\"text-lg font-semibold mb-2\">No consignments yet</h4>\n                    <p className=\"text-muted-foreground\">Start your gold investment journey today.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Consignments Tab */}\n          <TabsContent value=\"consignments\" className=\"space-y-4 md:space-y-6\" data-testid=\"consignments-content\">\n            <Card>\n              <CardHeader className=\"flex flex-col md:flex-row items-start md:items-center justify-between gap-3 md:gap-0\">\n                <CardTitle className=\"text-lg md:text-xl\">Your Gold Consignments</CardTitle>\n                <Button \n                  onClick={() => window.location.href = \"/consignment\"} \n                  data-testid=\"button-new-consignment\"\n                  className=\"min-h-[44px] px-4 md:px-6 text-sm md:text-base touch-manipulation w-full md:w-auto\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  New Consignment\n                </Button>\n              </CardHeader>\n              <CardContent>\n                {consignments.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {consignments.map((consignment: any) => (\n                      <Card key={consignment.id} className=\"p-3 md:p-4\" data-testid={`consignment-${consignment.id}`}>\n                        <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-3 md:gap-0\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-sm md:text-base\">#{consignment.consignmentNumber}</h4>\n                            <p className=\"text-xs md:text-sm text-muted-foreground mb-2 md:mb-0\">{consignment.description}</p>\n                            <div className=\"grid grid-cols-1 md:flex md:items-center md:gap-4 gap-1 md:mt-2 text-xs md:text-sm\">\n                              <span>Weight: {consignment.weight} oz</span>\n                              <span>Purity: {consignment.purity}%</span>\n                              <span>Value: ${parseFloat(consignment.estimatedValue).toLocaleString()}</span>\n                            </div>\n                          </div>\n                          <div className=\"flex flex-row md:flex-col md:text-right items-center md:items-end justify-between md:justify-start gap-2\">\n                            <Badge variant={consignment.status === 'stored' ? 'default' : 'secondary'} className=\"text-xs\">\n                              {consignment.status}\n                            </Badge>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => window.location.href = `/tracking/${consignment.consignmentNumber}`}\n                              data-testid={`button-track-${consignment.id}`}\n                              className=\"text-xs md:text-sm px-2 md:px-3\"\n                            >\n                              <ExternalLink className=\"h-3 w-3 md:h-4 md:w-4 mr-1\" />\n                              Track\n                            </Button>\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 md:py-12 px-4\">\n                    <Shield className=\"h-12 w-12 md:h-16 md:w-16 text-muted-foreground mx-auto mb-4\" />\n                    <h4 className=\"text-base md:text-lg font-semibold mb-2\">No consignments yet</h4>\n                    <p className=\"text-sm md:text-base text-muted-foreground mb-4\">\n                      Create your first consignment to start storing gold securely.\n                    </p>\n                    <Button onClick={() => window.location.href = \"/consignment\"} data-testid=\"button-create-first\" className=\"w-full md:w-auto\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Create First Consignment\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Certificates Tab */}\n          <TabsContent value=\"certificates\" className=\"space-y-4 md:space-y-6\" data-testid=\"certificates-content\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Storage Certificates</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {consignments.filter((c: any) => c.certificateUrl).length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {consignments.filter((c: any) => c.certificateUrl).map((consignment: any) => (\n                      <div key={consignment.id} className=\"flex items-center justify-between p-4 bg-muted rounded-lg\" data-testid={`certificate-${consignment.id}`}>\n                        <div className=\"flex items-center\">\n                          <Award className=\"h-8 w-8 text-primary mr-3\" />\n                          <div>\n                            <h4 className=\"font-semibold\">Certificate #{consignment.consignmentNumber}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{consignment.description}</p>\n                          </div>\n                        </div>\n                        <Button variant=\"outline\" data-testid={`button-download-${consignment.id}`}>\n                          <Download className=\"h-4 w-4 mr-2\" />\n                          Download PDF\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <FileText className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                    <h4 className=\"text-lg font-semibold mb-2\">No certificates available</h4>\n                    <p className=\"text-muted-foreground\">\n                      Certificates will be generated once your consignments are processed and stored.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Tracking Tab */}\n          <TabsContent value=\"tracking\" className=\"space-y-4 md:space-y-6\" data-testid=\"tracking-content\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Track Your Consignments</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {consignments.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      <p className=\"text-muted-foreground mb-4\">Click on any consignment to view detailed tracking information.</p>\n                      {consignments.map((consignment: any) => (\n                        <Card key={consignment.id} className=\"p-4 cursor-pointer hover:bg-muted transition-colors\" \n                              onClick={() => window.location.href = `/tracking/${consignment.consignmentNumber}`}\n                              data-testid={`tracking-item-${consignment.id}`}>\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <h4 className=\"font-semibold\">#{consignment.consignmentNumber}</h4>\n                              <p className=\"text-sm text-muted-foreground\">{consignment.description}</p>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge variant={consignment.status === 'stored' ? 'default' : 'secondary'}>\n                                {consignment.status}\n                              </Badge>\n                              <Button variant=\"outline\" size=\"sm\" data-testid={`track-btn-${consignment.id}`}>\n                                Track Details\n                              </Button>\n                            </div>\n                          </div>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Shield className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                      <h4 className=\"text-lg font-semibold mb-2\">No consignments to track</h4>\n                      <p className=\"text-muted-foreground mb-4\">\n                        Create your first consignment to start tracking.\n                      </p>\n                      <Button onClick={() => window.location.href = \"/consignment\"} data-testid=\"button-create-first-tracking\">\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Create First Consignment\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Inheritance Tab */}\n          <TabsContent value=\"inheritance\" className=\"space-y-4 md:space-y-6\" data-testid=\"inheritance-content\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Will Builder */}\n              <Card data-testid=\"will-builder\">\n                <CardHeader>\n                  <CardTitle>\n                    {digitalWill ? \"Add Beneficiary\" : \"Create Digital Will\"}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {!digitalWill ? (\n                    <div className=\"text-center py-8\">\n                      <Calendar className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                      <h4 className=\"text-lg font-semibold mb-2\">No Digital Will Found</h4>\n                      <p className=\"text-muted-foreground mb-4\">\n                        Create a digital will to manage inheritance of your gold assets.\n                      </p>\n                      <Button \n                        onClick={handleCreateWill}\n                        disabled={createWillMutation.isPending}\n                        data-testid=\"button-create-will\"\n                      >\n                        {createWillMutation.isPending ? (\n                          <>\n                            <div className=\"w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin mr-2\"></div>\n                            Creating...\n                          </>\n                        ) : (\n                          <>\n                            <Plus className=\"h-4 w-4 mr-2\" />\n                            Create Digital Will\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  ) : (\n                    <>\n                      <div>\n                        <Label htmlFor=\"beneficiaryName\">Beneficiary Name *</Label>\n                        <Input\n                          id=\"beneficiaryName\"\n                          type=\"text\"\n                          placeholder=\"Full legal name\"\n                          value={willData.primaryBeneficiary}\n                          onChange={(e) => setWillData({ ...willData, primaryBeneficiary: e.target.value })}\n                          data-testid=\"input-beneficiary-name\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"relationship\">Relationship *</Label>\n                        <Select \n                          value={willData.relationship} \n                          onValueChange={(value) => setWillData({ ...willData, relationship: value })}\n                        >\n                          <SelectTrigger data-testid=\"select-relationship\">\n                            <SelectValue placeholder=\"Select relationship\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"spouse\">Spouse</SelectItem>\n                            <SelectItem value=\"child\">Child</SelectItem>\n                            <SelectItem value=\"parent\">Parent</SelectItem>\n                            <SelectItem value=\"sibling\">Sibling</SelectItem>\n                            <SelectItem value=\"other\">Other</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"allocation\">Allocation Percentage *</Label>\n                        <Input\n                          id=\"allocation\"\n                          type=\"number\"\n                          min=\"1\"\n                          max=\"100\"\n                          placeholder=\"50\"\n                          value={willData.allocation}\n                          onChange={(e) => setWillData({ ...willData, allocation: parseInt(e.target.value) || 0 })}\n                          data-testid=\"input-allocation\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"instructions\">Special Instructions</Label>\n                        <Textarea\n                          id=\"instructions\"\n                          rows={3}\n                          placeholder=\"Any specific instructions...\"\n                          value={willData.instructions}\n                          onChange={(e) => setWillData({ ...willData, instructions: e.target.value })}\n                          data-testid=\"textarea-instructions\"\n                        />\n                      </div>\n\n                      <Button \n                        onClick={handleAddBeneficiary}\n                        disabled={addBeneficiaryMutation.isPending}\n                        className=\"w-full\"\n                        data-testid=\"button-add-beneficiary\"\n                      >\n                        {addBeneficiaryMutation.isPending ? (\n                          <>\n                            <div className=\"w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin mr-2\"></div>\n                            Adding...\n                          </>\n                        ) : (\n                          <>\n                            <Plus className=\"h-4 w-4 mr-2\" />\n                            Add Beneficiary\n                          </>\n                        )}\n                      </Button>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Current Beneficiaries */}\n              <Card data-testid=\"current-beneficiaries\">\n                <CardHeader>\n                  <CardTitle>Current Beneficiaries</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {digitalWill?.beneficiaries?.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {digitalWill.beneficiaries.map((beneficiary: any, index: number) => (\n                        <div key={beneficiary.id} className=\"p-4 bg-muted rounded-lg\" data-testid={`beneficiary-${index}`}>\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h4 className=\"font-semibold\">{beneficiary.fullName}</h4>\n                            <span className=\"text-sm text-muted-foreground capitalize\">{beneficiary.relationship}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-2xl font-bold text-primary\">{beneficiary.percentage}%</span>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteBeneficiary(beneficiary.id)}\n                              disabled={deleteBeneficiaryMutation.isPending}\n                              data-testid={`button-delete-beneficiary-${index}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                          {beneficiary.instructions && (\n                            <p className=\"text-sm text-muted-foreground mt-2\">{beneficiary.instructions}</p>\n                          )}\n                        </div>\n                      ))}\n\n                      {/* Will Summary */}\n                      <div className=\"mt-6 p-4 bg-primary/10 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"font-medium\">Total Allocated:</span>\n                          <span className=\"text-xl font-bold text-primary\">{totalAllocation}%</span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"font-medium\">Will Status:</span>\n                          <Badge variant={totalAllocation === 100 ? \"default\" : \"secondary\"}>\n                            {totalAllocation === 100 ? (\n                              <>\n                                <CheckCircle className=\"h-4 w-4 mr-1\" />\n                                Complete\n                              </>\n                            ) : (\n                              <>\n                                <AlertCircle className=\"h-4 w-4 mr-1\" />\n                                Incomplete\n                              </>\n                            )}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Calendar className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                      <h4 className=\"text-lg font-semibold mb-2\">No Beneficiaries Added</h4>\n                      <p className=\"text-muted-foreground\">\n                        {digitalWill ? \"Add beneficiaries to complete your digital will.\" : \"Create a digital will first to add beneficiaries.\"}\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Desktop Footer */}\n      <div className=\"hidden md:block\">\n        <Footer />\n      </div>\n\n      {/* Mobile Bottom Navigation */}\n      <MobileBottomNav />\n    </div>\n  );\n}\n","size_bytes":46945},"client/src/pages/home.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport LivePrices from \"@/components/LivePrices\";\nimport ChatSupport from \"@/components/ChatSupport\";\nimport Footer from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Award, Scroll, TrendingUp, Calendar, Coins } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Home() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: consignments = [] } = useQuery({\n    queryKey: [\"/api/consignments\"],\n    enabled: !!user,\n  });\n\n  const { data: digitalWill } = useQuery({\n    queryKey: [\"/api/digital-wills\"],\n    enabled: !!user,\n  });\n\n  const { data: goldPrices } = useQuery({\n    queryKey: [\"/api/gold-prices\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading your portfolio...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const totalWeight = consignments.reduce((sum: number, c: any) => sum + parseFloat(c.weight || 0), 0);\n  const totalValue = consignments.reduce((sum: number, c: any) => sum + parseFloat(c.estimatedValue || 0), 0);\n  const currentGoldPrice = goldPrices?.usd || 2034.50;\n\n  return (\n    <div className=\"min-h-screen bg-background pb-24 md:pb-0\">\n      {/* Desktop Navigation */}\n      <div className=\"hidden md:block\">\n        <Navigation \n          goldPrice={currentGoldPrice}\n          onLogin={() => window.location.href = \"/api/login\"}\n          onRegister={() => window.location.href = \"/api/login\"}\n          user={user}\n        />\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8 py-3 md:py-8\" data-testid=\"home-dashboard\">\n        {/* Welcome Header */}\n        <div className=\"mb-4 md:mb-8\">\n          <div className=\"bg-primary text-primary-foreground rounded-2xl p-4 md:p-8 shadow-lg\">\n            <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between gap-3 md:gap-0\">\n              <div>\n                <h1 className=\"text-xl md:text-3xl font-bold mb-1 md:mb-2\" data-testid=\"welcome-message\">\n                  Welcome back, {user?.firstName || 'Valued Client'}\n                </h1>\n                <p className=\"text-primary-foreground/80 text-sm md:text-base\">Portfolio Overview</p>\n              </div>\n              <div className=\"text-left md:text-right\">\n                <div className=\"text-2xl md:text-4xl font-bold\" data-testid=\"total-value\">\n                  ${totalValue.toLocaleString('en-US', { maximumFractionDigits: 0 })}\n                </div>\n                <div className=\"text-xs md:text-sm text-primary-foreground/80\">Total Portfolio Value</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Portfolio Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 md:gap-6 mb-4 md:mb-8\" data-testid=\"portfolio-stats\">\n          <Card className=\"p-4 md:p-6\">\n            <div className=\"flex items-center mb-3 md:mb-4\">\n              <Coins className=\"h-6 w-6 md:h-8 md:w-8 text-primary mr-2 md:mr-3\" />\n              <h3 className=\"font-semibold text-sm md:text-base\">Gold Holdings</h3>\n            </div>\n            <div className=\"text-2xl md:text-3xl font-bold mb-1 md:mb-2\" data-testid=\"total-weight\">\n              {totalWeight.toFixed(1)} oz\n            </div>\n            <div className=\"text-xs md:text-sm text-muted-foreground\">Current Weight</div>\n          </Card>\n\n          <Card className=\"p-4 md:p-6\">\n            <div className=\"flex items-center mb-3 md:mb-4\">\n              <TrendingUp className=\"h-6 w-6 md:h-8 md:w-8 text-primary mr-2 md:mr-3\" />\n              <h3 className=\"font-semibold text-sm md:text-base\">Performance</h3>\n            </div>\n            <div className=\"text-2xl md:text-3xl font-bold mb-1 md:mb-2 text-green-600\" data-testid=\"performance\">\n              +{((currentGoldPrice - 1950) / 1950 * 100).toFixed(1)}%\n            </div>\n            <div className=\"text-xs md:text-sm text-muted-foreground\">This Year</div>\n          </Card>\n\n          <Card className=\"p-4 md:p-6\">\n            <div className=\"flex items-center mb-3 md:mb-4\">\n              <Calendar className=\"h-6 w-6 md:h-8 md:w-8 text-primary mr-2 md:mr-3\" />\n              <h3 className=\"font-semibold text-sm md:text-base\">Active Storage</h3>\n            </div>\n            <div className=\"text-2xl md:text-3xl font-bold mb-1 md:mb-2\" data-testid=\"active-consignments\">\n              {consignments.length}\n            </div>\n            <div className=\"text-xs md:text-sm text-muted-foreground\">Consignments</div>\n          </Card>\n        </div>\n\n        {/* Live Gold Prices */}\n        <LivePrices />\n\n        {/* Recent Activity & Quick Actions */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-8 mb-4 md:mb-8\">\n          {/* Recent Activity */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"p-6\" data-testid=\"recent-activity\">\n              <h3 className=\"text-xl font-semibold mb-6\">Recent Activity</h3>\n              \n              {consignments.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {consignments.slice(0, 3).map((consignment: any, index: number) => (\n                    <div key={consignment.id} className=\"flex items-center justify-between p-4 bg-muted rounded-lg\" data-testid={`activity-${index}`}>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center mr-3\">\n                          <Plus className=\"h-5 w-5 text-primary-foreground\" />\n                        </div>\n                        <div>\n                          <div className=\"font-medium\">Consignment #{consignment.consignmentNumber}</div>\n                          <div className=\"text-sm text-muted-foreground\">{consignment.description}</div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold\">+{consignment.weight} oz</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Value: ${parseFloat(consignment.estimatedValue).toLocaleString()}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Coins className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                  <h4 className=\"text-lg font-semibold mb-2\">No consignments yet</h4>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Start your gold investment journey by creating your first consignment.\n                  </p>\n                  <Button onClick={() => setLocation(\"/consignment\")} data-testid=\"button-start-first-consignment\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create First Consignment\n                  </Button>\n                </div>\n              )}\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"space-y-4\" data-testid=\"quick-actions\">\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Quick Actions</h3>\n              <div className=\"space-y-3\">\n                <Button \n                  className=\"w-full justify-start\" \n                  onClick={() => setLocation(\"/consignment\")}\n                  data-testid=\"button-add-gold\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Gold\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  onClick={() => setLocation(\"/dashboard\")}\n                  data-testid=\"button-view-certificates\"\n                >\n                  <Award className=\"h-4 w-4 mr-2\" />\n                  View Certificates\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  onClick={() => setLocation(\"/dashboard\")}\n                  data-testid=\"button-manage-will\"\n                >\n                  <Scroll className=\"h-4 w-4 mr-2\" />\n                  {digitalWill ? \"Manage Will\" : \"Create Will\"}\n                </Button>\n              </div>\n            </Card>\n\n            {/* Gold Price Summary */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Gold Price Alert</h3>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary mb-1\" data-testid=\"current-gold-price\">\n                  ${currentGoldPrice.toFixed(2)}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">per ounce</div>\n                <div className=\"mt-2 text-sm text-green-600\">\n                  ↑ +1.2% today\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <ChatSupport />\n      {/* Desktop Footer */}\n      <div className=\"hidden md:block\">\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","size_bytes":9714},"client/src/pages/landing.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport Navigation from \"@/components/Navigation\";\nimport HeroCarousel from \"@/components/HeroCarousel\";\nimport LivePrices from \"@/components/LivePrices\";\nimport PricingCalculator from \"@/components/PricingCalculator\";\nimport ChatSupport from \"@/components/ChatSupport\";\nimport Footer from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Shield, Lock, University, Award, CheckCircle, Search, QrCode, Download } from \"lucide-react\";\n\nexport default function Landing() {\n  const [goldPrice, setGoldPrice] = useState(2034.50);\n  const [trackingId, setTrackingId] = useState(\"\");\n\n  const handleStartConsignment = () => {\n    window.location.href = \"/auth\";\n  };\n\n  const handleGetStarted = () => {\n    window.location.href = \"/auth\";\n  };\n\n  const handleTrackConsignment = () => {\n    if (trackingId.trim()) {\n      // This would normally navigate to tracking page with the ID\n      console.log(`Tracking consignment: ${trackingId}`);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <Navigation \n        goldPrice={goldPrice}\n        onLogin={() => window.location.href = \"/auth\"}\n        onRegister={() => window.location.href = \"/auth\"}\n      />\n\n      {/* Hero Carousel */}\n      <HeroCarousel \n        onStartConsignment={handleStartConsignment}\n        onViewPricing={() => document.getElementById('pricing')?.scrollIntoView({ behavior: 'smooth' })}\n      />\n\n      {/* Trust Indicators */}\n      <section className=\"py-12 bg-muted\" data-testid=\"trust-indicators\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 items-center\">\n            <div className=\"text-center\">\n              <Shield className=\"mx-auto h-8 w-8 text-primary mb-2\" />\n              <p className=\"font-semibold\">LBMA Certified</p>\n              <p className=\"text-sm text-muted-foreground\">London Bullion Market</p>\n            </div>\n            <div className=\"text-center\">\n              <Lock className=\"mx-auto h-8 w-8 text-primary mb-2\" />\n              <p className=\"font-semibold\">$100M Insured</p>\n              <p className=\"text-sm text-muted-foreground\">Lloyd's of London</p>\n            </div>\n            <div className=\"text-center\">\n              <University className=\"mx-auto h-8 w-8 text-primary mb-2\" />\n              <p className=\"font-semibold\">Bank-Grade Security</p>\n              <p className=\"text-sm text-muted-foreground\">Tier 4 Data Center</p>\n            </div>\n            <div className=\"text-center\">\n              <Award className=\"mx-auto h-8 w-8 text-primary mb-2\" />\n              <p className=\"font-semibold\">ISO 27001</p>\n              <p className=\"text-sm text-muted-foreground\">Information Security</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Live Gold Prices */}\n      <LivePrices />\n\n      {/* Services Section */}\n      <section id=\"services\" className=\"py-20 bg-muted\" data-testid=\"services-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-serif font-bold mb-6\">Our Premium Services</h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Comprehensive gold storage, investment, and inheritance solutions designed for the discerning investor\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {/* Gold Storage Service */}\n            <Card className=\"overflow-hidden group hover:shadow-xl transition-all duration-300\" data-testid=\"service-storage\">\n              <div className=\"h-64 bg-gradient-to-br from-muted to-muted-foreground/10 relative\">\n                <div className=\"absolute inset-0 bg-black/40 group-hover:bg-black/30 transition-colors\"></div>\n                <div className=\"absolute top-4 left-4\">\n                  <div className=\"bg-primary text-primary-foreground px-3 py-1 rounded-full text-sm font-medium\">\n                    Most Popular\n                  </div>\n                </div>\n              </div>\n              <div className=\"p-8\">\n                <h3 className=\"text-2xl font-serif font-bold mb-4\">Secure Gold Storage</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  Professional-grade storage facilities with 24/7 monitoring, climate control, and comprehensive insurance coverage.\n                </p>\n                <ul className=\"space-y-2 mb-6\">\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-primary mr-2\" />\n                    Bank-grade vault security\n                  </li>\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-primary mr-2\" />\n                    Individual storage allocation\n                  </li>\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-primary mr-2\" />\n                    Digital certificates & QR tracking\n                  </li>\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-primary mr-2\" />\n                    Full insurance coverage\n                  </li>\n                </ul>\n                <Button className=\"w-full\" onClick={handleGetStarted} data-testid=\"button-learn-storage\">\n                  Learn More\n                </Button>\n              </div>\n            </Card>\n\n            {/* Gold Consignment Service */}\n            <Card className=\"overflow-hidden group hover:shadow-xl transition-all duration-300\" data-testid=\"service-consignment\">\n              <div className=\"h-64 bg-gradient-to-br from-gold-200 to-gold-400 relative\">\n                <div className=\"absolute inset-0 bg-black/40 group-hover:bg-black/30 transition-colors\"></div>\n              </div>\n              <div className=\"p-8\">\n                <h3 className=\"text-2xl font-serif font-bold mb-4\">Gold Consignment</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  Easy consignment process with professional valuation, documentation, and secure transfer to our facilities.\n                </p>\n                <ul className=\"space-y-2 mb-6\">\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-primary mr-2\" />\n                    Professional gold appraisal\n                  </li>\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-primary mr-2\" />\n                    Secure pickup & transport\n                  </li>\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-primary mr-2\" />\n                    Digital documentation\n                  </li>\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-primary mr-2\" />\n                    Instant online tracking\n                  </li>\n                </ul>\n                <Button variant=\"outline\" className=\"w-full border-2 border-primary text-primary hover:bg-primary hover:text-primary-foreground\" onClick={handleStartConsignment} data-testid=\"button-start-consignment\">\n                  Start Consignment\n                </Button>\n              </div>\n            </Card>\n\n            {/* Inheritance Planning Service */}\n            <Card className=\"overflow-hidden group hover:shadow-xl transition-all duration-300\" data-testid=\"service-inheritance\">\n              <div className=\"h-64 bg-gradient-to-br from-muted-foreground/20 to-muted relative\">\n                <div className=\"absolute inset-0 bg-black/40 group-hover:bg-black/30 transition-colors\"></div>\n              </div>\n              <div className=\"p-8\">\n                <h3 className=\"text-2xl font-serif font-bold mb-4\">Digital Inheritance</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  Comprehensive digital will creation and inheritance planning for your gold assets with legal verification.\n                </p>\n                <ul className=\"space-y-2 mb-6\">\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-primary mr-2\" />\n                    Digital will builder\n                  </li>\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-primary mr-2\" />\n                    Heir verification process\n                  </li>\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-primary mr-2\" />\n                    Legal documentation\n                  </li>\n                  <li className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-primary mr-2\" />\n                    Claims processing\n                  </li>\n                </ul>\n                <Button variant=\"outline\" className=\"w-full border-2 border-primary text-primary hover:bg-primary hover:text-primary-foreground\" onClick={handleGetStarted} data-testid=\"button-plan-inheritance\">\n                  Plan Inheritance\n                </Button>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Calculator */}\n      <PricingCalculator onGetQuote={handleGetStarted} />\n\n      {/* Call to Action */}\n      <section className=\"py-20 bg-primary text-primary-foreground\" data-testid=\"cta-section\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-serif font-bold mb-6\">Ready to Secure Your Gold?</h2>\n          <p className=\"text-xl text-primary-foreground/80 mb-8 max-w-2xl mx-auto\">\n            Join thousands of investors who trust GoldVault Pro with their precious metals storage and inheritance planning.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              variant=\"secondary\" \n              className=\"text-lg px-8 py-3\"\n              onClick={handleGetStarted}\n              data-testid=\"button-get-started-cta\"\n            >\n              Get Started Today\n            </Button>\n            <Button \n              size=\"lg\" \n              variant=\"outline\" \n              className=\"text-lg px-8 py-3 border-primary-foreground text-primary-foreground hover:bg-primary-foreground hover:text-primary\"\n              onClick={() => document.getElementById('pricing')?.scrollIntoView({ behavior: 'smooth' })}\n              data-testid=\"button-view-pricing-cta\"\n            >\n              View Pricing\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Public Tracking System */}\n      <section id=\"tracking\" className=\"py-20 bg-background\" data-testid=\"tracking-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-serif font-bold mb-6\">Track Your Consignment</h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Enter your consignment ID or scan the QR code to view real-time status and audit trail\n            </p>\n          </div>\n          \n          <div className=\"max-w-2xl mx-auto mb-12\">\n            <Card className=\"p-8\" data-testid=\"tracking-search\">\n              <div className=\"flex flex-col md:flex-row gap-4\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Enter Consignment ID (e.g., GV-2024-001234)\"\n                  value={trackingId}\n                  onChange={(e) => setTrackingId(e.target.value)}\n                  className=\"flex-1\"\n                  data-testid=\"input-tracking-id\"\n                />\n                <Button onClick={handleTrackConsignment} className=\"whitespace-nowrap\" data-testid=\"button-track-now\">\n                  <Search className=\"h-4 w-4 mr-2\" />\n                  Track Now\n                </Button>\n              </div>\n              <div className=\"mt-4 text-center\">\n                <Button variant=\"link\" className=\"text-primary hover:text-primary/80 text-sm\" data-testid=\"button-scan-qr\">\n                  <QrCode className=\"h-4 w-4 mr-1\" />\n                  Or scan QR code from certificate\n                </Button>\n              </div>\n            </Card>\n          </div>\n          \n          {/* Sample Tracking Results */}\n          <Card className=\"p-8\" data-testid=\"tracking-results\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <div>\n                <h3 className=\"text-2xl font-bold\">Consignment #GV-2024-001234</h3>\n                <p className=\"text-muted-foreground\">2.5 oz Gold American Eagle Coins</p>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800\">\n                  <CheckCircle className=\"h-4 w-4 mr-1\" />\n                  Stored Securely\n                </div>\n                <div className=\"text-sm text-muted-foreground mt-1\">Last updated: 2 hours ago</div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-6\">\n              <div className=\"flex items-start\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                  <CheckCircle className=\"h-5 w-5 text-primary-foreground\" />\n                </div>\n                <div className=\"ml-4 flex-1\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-semibold\">Items secured in Vault A-127</h4>\n                    <span className=\"text-sm text-muted-foreground\">Jan 15, 2024 - 2:30 PM</span>\n                  </div>\n                  <p className=\"text-muted-foreground text-sm\">\n                    Gold coins allocated to individual secure storage compartment with biometric access control\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                  <Shield className=\"h-5 w-5 text-primary-foreground\" />\n                </div>\n                <div className=\"ml-4 flex-1\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-semibold\">Insurance coverage activated</h4>\n                    <span className=\"text-sm text-muted-foreground\">Jan 15, 2024 - 1:45 PM</span>\n                  </div>\n                  <p className=\"text-muted-foreground text-sm\">\n                    Full value insurance policy activated through Lloyd's of London - Policy #LL-2024-7891\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                  <Award className=\"h-5 w-5 text-primary-foreground\" />\n                </div>\n                <div className=\"ml-4 flex-1\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-semibold\">Digital certificate generated</h4>\n                    <span className=\"text-sm text-muted-foreground\">Jan 15, 2024 - 1:15 PM</span>\n                  </div>\n                  <p className=\"text-muted-foreground text-sm\">\n                    Blockchain-verified certificate with QR tracking code generated and emailed\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"mt-8 p-6 bg-muted rounded-xl\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-semibold\">Storage Certificate</h4>\n                  <p className=\"text-sm text-muted-foreground\">PDF certificate with QR tracking code</p>\n                </div>\n                <Button onClick={handleGetStarted} data-testid=\"button-download-certificate\">\n                  <Download className=\"h-4 w-4 mr-1\" />\n                  Download PDF\n                </Button>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </section>\n\n\n\n      {/* Chat Support */}\n      <ChatSupport />\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17042},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/tracking.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, QrCode, Download, CheckCircle, Shield, Award, AlertCircle } from \"lucide-react\";\n\ninterface TrackingPageProps {\n  params?: { consignmentNumber?: string };\n}\n\nexport default function Tracking({ params }: TrackingPageProps) {\n  const [trackingId, setTrackingId] = useState(params?.consignmentNumber || \"\");\n  const [searchedId, setSearchedId] = useState(params?.consignmentNumber || \"\");\n\n  const { data: trackingData, isLoading, error } = useQuery({\n    queryKey: [\"/api/tracking\", searchedId],\n    enabled: !!searchedId,\n    retry: false,\n  });\n\n  const handleSearch = () => {\n    if (trackingId.trim()) {\n      setSearchedId(trackingId.trim());\n    }\n  };\n\n  const handleScanQR = () => {\n    // In a real app, this would open QR scanner\n    alert(\"QR Scanner would open here\");\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'stored':\n        return 'bg-green-100 text-green-800';\n      case 'verified':\n        return 'bg-blue-100 text-blue-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'stored':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case 'verified':\n        return <Shield className=\"h-4 w-4\" />;\n      case 'pending':\n        return <AlertCircle className=\"h-4 w-4\" />;\n      default:\n        return <AlertCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background pb-24 md:pb-0\">\n      {/* Desktop Navigation */}\n      <div className=\"hidden md:block\">\n        <Navigation \n          goldPrice={2034.50}\n          onLogin={() => window.location.href = \"/api/login\"}\n          onRegister={() => window.location.href = \"/api/login\"}\n        />\n      </div>\n\n      <div className=\"max-w-4xl mx-auto px-3 sm:px-4 lg:px-8 py-3 md:py-8\" data-testid=\"tracking-page\">\n        {/* Header */}\n        <div className=\"text-center mb-6 md:mb-12\">\n          <h1 className=\"text-2xl md:text-4xl lg:text-5xl font-serif font-bold mb-3 md:mb-6\">Track Your Consignment</h1>\n          <p className=\"text-base md:text-xl text-muted-foreground max-w-3xl mx-auto px-2\">\n            Enter your consignment ID or scan the QR code to view real-time status and audit trail\n          </p>\n        </div>\n\n        {/* Search Box */}\n        <Card className=\"mb-4 md:mb-8\" data-testid=\"tracking-search\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <Input\n                type=\"text\"\n                placeholder=\"Enter Consignment ID (e.g., GV-2024-001234)\"\n                value={trackingId}\n                onChange={(e) => setTrackingId(e.target.value)}\n                className=\"flex-1\"\n                data-testid=\"input-tracking-id\"\n                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n              />\n              <Button \n                onClick={handleSearch} \n                className=\"whitespace-nowrap\"\n                disabled={!trackingId.trim() || isLoading}\n                data-testid=\"button-track\"\n              >\n                {isLoading ? (\n                  <>\n                    <div className=\"w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin mr-2\"></div>\n                    Searching...\n                  </>\n                ) : (\n                  <>\n                    <Search className=\"h-4 w-4 mr-2\" />\n                    Track Now\n                  </>\n                )}\n              </Button>\n            </div>\n            <div className=\"mt-4 text-center\">\n              <Button \n                variant=\"link\" \n                onClick={handleScanQR}\n                className=\"text-primary hover:text-primary/80 text-sm\"\n                data-testid=\"button-scan-qr\"\n              >\n                <QrCode className=\"h-4 w-4 mr-1\" />\n                Or scan QR code from certificate\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tracking Results */}\n        {error && (\n          <Card className=\"mb-8\" data-testid=\"tracking-error\">\n            <CardContent className=\"p-6 text-center\">\n              <AlertCircle className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Consignment Not Found</h3>\n              <p className=\"text-muted-foreground\">\n                Please check your consignment ID and try again. Make sure to include the full ID (e.g., GV-2024-001234).\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {trackingData && (\n          <Card className=\"mb-8\" data-testid=\"tracking-results\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"text-2xl font-bold\">\n                    Consignment #{trackingData.consignment.consignmentNumber}\n                  </CardTitle>\n                  <p className=\"text-muted-foreground mt-1\">\n                    {trackingData.consignment.description}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <Badge \n                    className={`${getStatusColor(trackingData.consignment.status)} mb-2`}\n                    data-testid=\"status-badge\"\n                  >\n                    {getStatusIcon(trackingData.consignment.status)}\n                    <span className=\"ml-1 capitalize\">{trackingData.consignment.status}</span>\n                  </Badge>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Weight: {trackingData.consignment.weight} oz\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              {/* Timeline */}\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4\">Audit Trail</h3>\n                <div className=\"space-y-4\" data-testid=\"audit-trail\">\n                  {trackingData.events.map((event: any, index: number) => (\n                    <div key={event.id} className=\"flex items-start\" data-testid={`event-${index}`}>\n                      <div className=\"flex-shrink-0 w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                        {event.eventType === 'created' && <CheckCircle className=\"h-5 w-5 text-primary-foreground\" />}\n                        {event.eventType === 'verified' && <Shield className=\"h-5 w-5 text-primary-foreground\" />}\n                        {event.eventType === 'stored' && <Award className=\"h-5 w-5 text-primary-foreground\" />}\n                      </div>\n                      <div className=\"ml-4 flex-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"font-semibold\">{event.description}</h4>\n                          <span className=\"text-sm text-muted-foreground\">\n                            {new Date(event.timestamp).toLocaleString()}\n                          </span>\n                        </div>\n                        {event.metadata && (\n                          <p className=\"text-muted-foreground text-sm mt-1\">\n                            Additional details available in metadata\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Certificate Download */}\n              <Card className=\"bg-muted\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-semibold\">Storage Certificate</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        PDF certificate with QR tracking code\n                      </p>\n                    </div>\n                    <Button data-testid=\"button-download-certificate\">\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Download PDF\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Sample tracking for demo when no specific ID is searched */}\n        {!searchedId && (\n          <Card className=\"mb-8\" data-testid=\"tracking-demo\">\n            <CardHeader>\n              <CardTitle>Try a Sample Tracking</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-4\">\n                Want to see how tracking works? Try searching for our sample consignment:\n              </p>\n              <div className=\"flex items-center gap-2\">\n                <code className=\"bg-muted px-2 py-1 rounded text-sm\">GV-2024-001234</code>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => {\n                    setTrackingId(\"GV-2024-001234\");\n                    setSearchedId(\"GV-2024-001234\");\n                  }}\n                  data-testid=\"button-try-sample\"\n                >\n                  Try Sample\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Desktop Footer */}\n      <div className=\"hidden md:block\">\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","size_bytes":10065},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"README.md":{"content":"# GoldVault Pro - Gold Consignment & Digital Inheritance Platform\n\nA comprehensive gold consignment and digital inheritance platform built with React, TypeScript, Express.js, and PostgreSQL. The system provides secure gold storage services, consignment management, digital will creation, inheritance claims processing, and admin management capabilities.\n\n## 🌟 Features\n\n### Core Services\n- **Secure Gold Storage**: Professional-grade vault storage with 24/7 monitoring\n- **Gold Consignment**: Complete consignment process with professional valuation\n- **Digital Certificates**: Blockchain-verified certificates with QR code tracking\n- **Real-time Tracking**: Public consignment tracking system\n- **Live Gold Prices**: Real-time gold price feeds with multi-currency support\n\n### Authentication & Security\n- **User Authentication**: Secure email/password authentication system\n- **Role-Based Access**: User and Admin role management\n- **Session Management**: PostgreSQL-backed secure sessions\n- **Protected Routes**: Route-level authentication and authorization\n\n### Digital Inheritance (Authenticated Users Only)\n- **Digital Will Creation**: Comprehensive will builder with beneficiary management\n- **Inheritance Claims**: Streamlined claims processing system\n- **Document Upload**: Secure document storage for legal verification\n- **Beneficiary Management**: Add, edit, and remove beneficiaries\n\n### Admin Management (Admin Users Only)\n- **Claims Management**: Review and process inheritance claims\n- **Consignment Oversight**: Monitor and manage all consignments\n- **User Management**: Comprehensive user administration\n- **Analytics Dashboard**: Business insights and reporting\n\n### Additional Features\n- **Live Chat Support**: Real-time customer support system\n- **Pricing Calculator**: Dynamic storage cost calculation\n- **Multi-currency Support**: USD, GBP, EUR pricing\n- **Responsive Design**: Mobile-first responsive design\n- **File Upload**: Secure document and certificate management\n\n## 🏗️ System Architecture\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for build tooling and development server\n- **shadcn/ui** component library with Radix UI primitives\n- **Tailwind CSS** for styling\n- **Wouter** for client-side routing\n- **TanStack Query** for server state management\n- **React Hook Form** with Zod validation\n\n### Backend\n- **Express.js** with TypeScript\n- **Drizzle ORM** for type-safe database operations\n- **Passport.js** for authentication\n- **PostgreSQL** with Neon serverless hosting\n- **Multer** for file uploads\n- **bcrypt** for password hashing\n\n### Database Design\n- **Users**: Authentication and profile management\n- **Consignments**: Gold storage tracking\n- **Digital Wills**: Inheritance planning\n- **Beneficiaries**: Will beneficiary management\n- **Claims**: Inheritance claims processing\n- **Chat Messages**: Customer support history\n- **Audit Events**: Immutable tracking logs\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Node.js 18+ \n- PostgreSQL database\n- npm or yarn package manager\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd goldvault-pro\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Set up environment variables**\n   Create a `.env` file with the following variables:\n   ```env\n   DATABASE_URL=your_postgresql_connection_string\n   SESSION_SECRET=your_session_secret_key\n   PORT=5000\n   ```\n\n4. **Set up the database**\n   ```bash\n   npm run db:push\n   ```\n\n5. **Start the development server**\n   ```bash\n   npm run dev\n   ```\n\nThe application will be available at `http://localhost:5000`\n\n### Database Schema Setup\n\nThe application uses Drizzle ORM for database management. To set up or update the database schema:\n\n```bash\n# Push schema changes to database\nnpm run db:push\n\n# Force push if there are conflicts\nnpm run db:push --force\n```\n\n## 🔐 Authentication System\n\n### User Registration\nUsers can register with:\n- Email address\n- Password (minimum 6 characters)\n- First and Last name\n- Default role: \"user\"\n\n### User Roles\n- **User**: Access to personal dashboard, consignments, and digital inheritance\n- **Admin**: Full system access including claims management and analytics\n\n### Login Process\n1. Navigate to `/auth`\n2. Enter email and password\n3. Upon successful login, users are redirected to their dashboard\n4. Admin users have access to additional management features\n\n## 📱 User Interface\n\n### Public Pages (No Authentication Required)\n- **Homepage**: Company information and services overview\n- **Tracking**: Public consignment tracking system\n- **Authentication**: Login and registration forms\n\n### Protected Pages (Authentication Required)\n- **Dashboard**: Personal portfolio overview\n- **Consignments**: Manage gold consignments\n- **Digital Will**: Create and manage inheritance plans\n- **Portfolio**: View certificates and holdings\n\n### Admin Pages (Admin Role Required)\n- **Admin Dashboard**: System overview and analytics\n- **Claims Management**: Review inheritance claims\n- **User Management**: Comprehensive user administration\n\n## 🔧 API Endpoints\n\n### Authentication\n- `POST /api/register` - User registration\n- `POST /api/login` - User login\n- `POST /api/logout` - User logout\n- `GET /api/user` - Get current user info\n\n### Consignments\n- `POST /api/consignments` - Create new consignment\n- `GET /api/consignments` - Get user's consignments\n- `GET /api/consignments/:id` - Get specific consignment\n- `GET /api/tracking/:number` - Public tracking (no auth)\n\n### Digital Wills\n- `POST /api/digital-wills` - Create digital will\n- `GET /api/digital-wills` - Get user's digital will\n- `POST /api/beneficiaries` - Add beneficiary\n- `DELETE /api/beneficiaries/:id` - Remove beneficiary\n\n### Admin (Admin Role Required)\n- `GET /api/admin/pending-claims` - Get pending claims\n- `PATCH /api/admin/claims/:id/status` - Update claim status\n\n### Other Services\n- `GET /api/gold-prices` - Get current gold prices\n- `GET /api/storage-plans` - Get available storage plans\n\n## 🛡️ Security Features\n\n### Authentication Security\n- Password hashing using bcrypt with salt\n- Session-based authentication with secure cookies\n- Session data stored in PostgreSQL\n- CSRF protection via secure session configuration\n\n### Route Protection\n- Middleware-based authentication checks\n- Role-based authorization for admin features\n- Protected API endpoints with proper error handling\n\n### Data Security\n- Input validation using Zod schemas\n- SQL injection prevention via Drizzle ORM\n- File upload security with type validation\n- Secure file storage with organized directory structure\n\n## 📂 Project Structure\n\n```\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── hooks/          # Custom React hooks\n│   │   ├── lib/            # Utility functions\n│   │   ├── pages/          # Page components\n│   │   └── ...\n├── server/                 # Backend Express application\n│   ├── services/           # Business logic services\n│   ├── auth.ts             # Authentication setup\n│   ├── routes.ts           # API route definitions\n│   ├── storage.ts          # Database operations\n│   └── ...\n├── shared/                 # Shared types and schemas\n│   └── schema.ts           # Database schema and types\n└── ...\n```\n\n## 🔄 Development Workflow\n\n### Running the Application\n```bash\n# Development mode (both frontend and backend)\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Start production server\nnpm run start\n```\n\n### Database Operations\n```bash\n# Update database schema\nnpm run db:push\n\n# Type checking\nnpm run check\n```\n\n### Adding New Features\n\n1. **Database Changes**\n   - Update `shared/schema.ts` with new tables/columns\n   - Run `npm run db:push` to apply changes\n   - Update storage interface in `server/storage.ts`\n\n2. **API Development**\n   - Add new routes in `server/routes.ts`\n   - Implement business logic in `server/services/`\n   - Add proper authentication/authorization\n\n3. **Frontend Development**\n   - Create new components in `client/src/components/`\n   - Add new pages in `client/src/pages/`\n   - Update routing in `client/src/App.tsx`\n\n## 🌐 Deployment\n\n### Production Deployment\n\n1. **Build the application**\n   ```bash\n   npm run build\n   ```\n\n2. **Set production environment variables**\n   - `DATABASE_URL`: Production PostgreSQL connection\n   - `SESSION_SECRET`: Strong production secret\n   - `NODE_ENV=production`\n\n3. **Deploy to your hosting platform**\n   - The application serves both frontend and backend on a single port\n   - Ensure your hosting platform supports Node.js applications\n   - Configure health checks for `/api/gold-prices` endpoint\n\n### Environment Configuration\n\n**Development**\n- Frontend dev server with hot reloading\n- Detailed error messages\n- Development database\n\n**Production**\n- Optimized build with static asset serving\n- Error logging without sensitive information\n- Production database with connection pooling\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes following the existing code style\n4. Update tests if necessary\n5. Submit a pull request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## 🆘 Support\n\nFor support and questions:\n- Check the documentation above\n- Review the API endpoints and their usage\n- Ensure all environment variables are properly configured\n- Verify database connectivity and schema is up to date\n\n## 🔮 Future Enhancements\n\n- Multi-factor authentication\n- Advanced analytics and reporting\n- Mobile application\n- Automated KYC verification\n- Blockchain integration for certificates\n- International shipping management\n- Advanced notification system","size_bytes":9903},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport connectPg from \"connect-pg-simple\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || 'dev-secret-' + randomBytes(32).toString('hex'),\n    resave: false,\n    saveUninitialized: false,\n    store: sessionStore,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to true in production with HTTPS\n      maxAge: sessionTtl,\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(\n      { usernameField: \"email\" },\n      async (email, password, done) => {\n        try {\n          const user = await storage.getUserByEmail(email);\n          if (!user || !(await comparePasswords(password, user.password))) {\n            return done(null, false, { message: \"Invalid email or password\" });\n          }\n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Register endpoint\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      // Hash password and create user\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createUser({\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n        role: \"user\",\n      });\n\n      // Log the user in\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json({\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n        });\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // Login endpoint\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    const user = req.user!;\n    res.status(200).json({\n      id: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role,\n    });\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  // User info endpoint\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const user = req.user!;\n    res.json({\n      id: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role,\n    });\n  });\n}\n\n// Middleware to check if user is authenticated\nexport function isAuthenticated(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n}\n\n// Middleware to check if user is admin\nexport function isAdmin(req: any, res: any, next: any) {\n  if (req.isAuthenticated() && req.user.role === \"admin\") {\n    return next();\n  }\n  res.status(403).json({ message: \"Admin access required\" });\n}","size_bytes":4916},"client/src/components/AdminNavigation.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Shield, Menu, LogOut, User, BarChart3, Package, Users, Gavel, MessageSquare } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface AdminNavigationProps {\n  goldPrice: number;\n  user: any;\n}\n\nexport default function AdminNavigation({ goldPrice, user }: AdminNavigationProps) {\n  const [, setLocation] = useLocation();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const handleLogout = async () => {\n    try {\n      await fetch(\"/api/logout\", { method: \"POST\" });\n      window.location.href = \"/auth\";\n    } catch (error) {\n      window.location.href = \"/auth\";\n    }\n  };\n\n  // No navigation items in the top navbar - they're in the admin tabs\n\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-50 backdrop-blur-sm bg-opacity-95\" data-testid=\"admin-navigation\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <Button \n                variant=\"ghost\" \n                className=\"text-2xl font-serif font-bold text-primary p-0 hover:bg-transparent\"\n                onClick={() => setLocation(\"/\")}\n                data-testid=\"admin-logo\"\n              >\n                <Shield className=\"h-6 w-6 mr-2\" />\n                GoldVault Pro Admin\n              </Button>\n            </div>\n            \n            {/* No navigation items in navbar - they're in the admin dashboard tabs */}\n          </div>\n\n          {/* Right side items */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            {/* Gold Price Display */}\n            <div className=\"flex items-center bg-muted rounded-lg px-3 py-1\" data-testid=\"admin-gold-price-display\">\n              <span className=\"text-2xl text-primary mr-2\">🪙</span>\n              <span className=\"text-sm font-medium\">\n                Gold: ${goldPrice.toFixed(2)}/oz\n              </span>\n            </div>\n\n            {/* Admin User Info */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"flex items-center px-3 py-1 bg-primary/10 rounded-lg\">\n                <User className=\"h-4 w-4 mr-2 text-primary\" />\n                <span className=\"text-sm font-medium text-primary\">\n                  {user?.firstName || 'Admin'}\n                </span>\n              </div>\n              <Button\n                variant=\"ghost\"\n                onClick={handleLogout}\n                size=\"sm\"\n                data-testid=\"admin-logout-button\"\n              >\n                <LogOut className=\"h-4 w-4 mr-1\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <Sheet open={isMenuOpen} onOpenChange={setIsMenuOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" data-testid=\"admin-mobile-menu\">\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-80\">\n                <div className=\"flex flex-col space-y-4 mt-8\">\n                  <div className=\"flex items-center justify-between pb-4 border-b\">\n                    <span className=\"font-semibold\">Admin Dashboard</span>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Gold: ${goldPrice.toFixed(2)}/oz\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center px-3 py-2\">\n                    <User className=\"h-4 w-4 mr-2\" />\n                    <span className=\"text-sm\">{user?.firstName || 'Admin'}</span>\n                  </div>\n                  \n                  <Button\n                    variant=\"ghost\"\n                    onClick={handleLogout}\n                    className=\"justify-start text-red-600 hover:text-red-700\"\n                    data-testid=\"admin-mobile-logout\"\n                  >\n                    <LogOut className=\"h-4 w-4 mr-3\" />\n                    Logout\n                  </Button>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":4518},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Shield, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\ntype RegisterData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  // Redirect if already logged in\n  if (user) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      \n      const welcomeMessage = user.role === \"admin\" \n        ? \"Welcome to Admin Management Center!\" \n        : \"Welcome back to your portfolio!\";\n      \n      toast({\n        title: welcomeMessage,\n        description: \"You have been successfully logged in.\",\n      });\n      \n      // Small delay to ensure the query cache is updated\n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 100);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterData) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      \n      const welcomeMessage = user.role === \"admin\" \n        ? \"Welcome to Admin Management Center!\" \n        : \"Welcome to GoldVault Pro!\";\n      \n      toast({\n        title: welcomeMessage,\n        description: \"Your account has been created successfully.\",\n      });\n      \n      // Small delay to ensure the query cache is updated\n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 100);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onLogin = (data: LoginData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterData) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Left side - Auth form */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <Shield className=\"h-12 w-12 text-primary\" />\n            </div>\n            <h2 className=\"text-3xl font-bold text-foreground\">GoldVault Pro</h2>\n            <p className=\"text-muted-foreground mt-2\">\n              {isLogin ? \"Sign in to your account\" : \"Create your account\"}\n            </p>\n          </div>\n\n          <Card data-testid=\"auth-card\">\n            <CardHeader>\n              <CardTitle>{isLogin ? \"Sign In\" : \"Create Account\"}</CardTitle>\n              <CardDescription>\n                {isLogin \n                  ? \"Enter your credentials to access your gold portfolio\" \n                  : \"Join thousands of investors securing their gold assets\"\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLogin ? (\n                <Form {...loginForm}>\n                  <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\" data-testid=\"login-form\">\n                    <FormField\n                      control={loginForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"Enter your email\" {...field} data-testid=\"input-email\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={loginForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Enter your password\" {...field} data-testid=\"input-password\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <Button type=\"submit\" className=\"w-full\" disabled={loginMutation.isPending} data-testid=\"button-login\">\n                      {loginMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                      Sign In\n                    </Button>\n                  </form>\n                </Form>\n              ) : (\n                <Form {...registerForm}>\n                  <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\" data-testid=\"register-form\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"First name\" {...field} data-testid=\"input-first-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Last name\" {...field} data-testid=\"input-last-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <FormField\n                      control={registerForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"Enter your email\" {...field} data-testid=\"input-register-email\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={registerForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Create a password\" {...field} data-testid=\"input-register-password\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <Button type=\"submit\" className=\"w-full\" disabled={registerMutation.isPending} data-testid=\"button-register\">\n                      {registerMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                      Create Account\n                    </Button>\n                  </form>\n                </Form>\n              )}\n\n              <div className=\"mt-4 text-center\">\n                <Button\n                  variant=\"link\"\n                  onClick={() => setIsLogin(!isLogin)}\n                  className=\"text-sm text-muted-foreground\"\n                  data-testid=\"button-toggle-auth\"\n                >\n                  {isLogin \n                    ? \"Don't have an account? Sign up\" \n                    : \"Already have an account? Sign in\"\n                  }\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Right side - Hero section */}\n      <div className=\"flex-1 bg-primary text-primary-foreground p-8 flex items-center\">\n        <div className=\"space-y-8\">\n          <div>\n            <h1 className=\"text-4xl font-bold mb-4\">Secure Your Gold Assets</h1>\n            <p className=\"text-xl text-primary-foreground/80 mb-8\">\n              Professional-grade storage, digital certificates, and inheritance planning for your precious metals.\n            </p>\n          </div>\n          \n          <div className=\"space-y-6\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"w-12 h-12 bg-primary-foreground/20 rounded-lg flex items-center justify-center\">\n                <Shield className=\"h-6 w-6\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-2\">Bank-Grade Security</h3>\n                <p className=\"text-primary-foreground/80\">\n                  Your gold is stored in LBMA-certified vaults with 24/7 monitoring and comprehensive insurance.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-4\">\n              <div className=\"w-12 h-12 bg-primary-foreground/20 rounded-lg flex items-center justify-center\">\n                <Shield className=\"h-6 w-6\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-2\">Digital Certificates</h3>\n                <p className=\"text-primary-foreground/80\">\n                  Blockchain-verified certificates with QR codes for instant verification and tracking.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-4\">\n              <div className=\"w-12 h-12 bg-primary-foreground/20 rounded-lg flex items-center justify-center\">\n                <Shield className=\"h-6 w-6\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-2\">Inheritance Planning</h3>\n                <p className=\"text-primary-foreground/80\">\n                  Comprehensive digital will creation and beneficiary management for peace of mind.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12692},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages and dependencies\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":315}},"version":1}